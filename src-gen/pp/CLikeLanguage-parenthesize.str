module pp/CLikeLanguage-parenthesize

imports
  libstratego-lib
  signatures/-


strategies
  io-CLikeLanguage-parenthesize =
    io-wrap(parenthesize-CLikeLanguage)

  parenthesize-CLikeLanguage =
    innermost(CLikeLanguageParenthesize)


rules

  CLikeLanguageParenthesize :
    MulExpr(t_0, t_1, t_2) -> MulExpr(Parenthetical(t_0), t_1, t_2)
    where <(?LogicExpr(_, _, _)
            + ?AddExpr(_, _, _)
            + fail)> t_0

  CLikeLanguageParenthesize :
    MulExpr(t_0, t_1, t_2) -> MulExpr(t_0, Parenthetical(t_1), t_2)
    where <(?LogicExpr(_, _, _)
            + ?AddExpr(_, _, _)
            + fail)> t_1

  CLikeLanguageParenthesize :
    MulExpr(t_0, t_1, t_2) -> MulExpr(t_0, t_1, Parenthetical(t_2))
    where <(?LogicExpr(_, _, _)
            + ?AddExpr(_, _, _)
            + ?MulExpr(_, _, _)
            + fail)> t_2

  CLikeLanguageParenthesize :
    AddExpr(t_0, t_1, t_2) -> AddExpr(Parenthetical(t_0), t_1, t_2)
    where <(?LogicExpr(_, _, _) + fail)> t_0

  CLikeLanguageParenthesize :
    AddExpr(t_0, t_1, t_2) -> AddExpr(t_0, Parenthetical(t_1), t_2)
    where <(?LogicExpr(_, _, _) + fail)> t_1

  CLikeLanguageParenthesize :
    AddExpr(t_0, t_1, t_2) -> AddExpr(t_0, t_1, Parenthetical(t_2))
    where <(?LogicExpr(_, _, _)
            + ?AddExpr(_, _, _)
            + fail)> t_2

  CLikeLanguageParenthesize :
    LogicExpr(t_0, t_1, t_2) -> LogicExpr(t_0, t_1, Parenthetical(t_2))
    where <(?LogicExpr(_, _, _) + fail)> t_2

  CLikeLanguageParenthesize :
    ArguSeparator(t_0, t_1) -> ArguSeparator(t_0, Parenthetical(t_1))
    where <(?ArguSeparator(_, _) + fail)> t_1

  CLikeLanguageParenthesize :
    ParamSeparator(t_0, t_1) -> ParamSeparator(t_0, Parenthetical(t_1))
    where <(?ParamSeparator(_, _) + fail)> t_1


signature
  constructors
    Parenthetical : Unknown -> Unknown

