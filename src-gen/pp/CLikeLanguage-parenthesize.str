module pp/CLikeLanguage-parenthesize

imports
  libstratego-lib
  signatures/-


strategies
  io-CLikeLanguage-parenthesize =
    io-wrap(parenthesize-CLikeLanguage)

  parenthesize-CLikeLanguage =
    innermost(CLikeLanguageParenthesize)


rules

  CLikeLanguageParenthesize :
    Mul(t_0, t_1, t_2) -> Mul(Parenthetical(t_0), t_1, t_2)
    where <(?Logic(_, _, _)
            + ?Add(_, _, _)
            + fail)> t_0

  CLikeLanguageParenthesize :
    Mul(t_0, t_1, t_2) -> Mul(t_0, Parenthetical(t_1), t_2)
    where <(?Logic(_, _, _)
            + ?Add(_, _, _)
            + fail)> t_1

  CLikeLanguageParenthesize :
    Mul(t_0, t_1, t_2) -> Mul(t_0, t_1, Parenthetical(t_2))
    where <(?Logic(_, _, _)
            + ?Add(_, _, _)
            + ?Mul(_, _, _)
            + fail)> t_2

  CLikeLanguageParenthesize :
    Add(t_0, t_1, t_2) -> Add(Parenthetical(t_0), t_1, t_2)
    where <(?Logic(_, _, _) + fail)> t_0

  CLikeLanguageParenthesize :
    Add(t_0, t_1, t_2) -> Add(t_0, Parenthetical(t_1), t_2)
    where <(?Logic(_, _, _) + fail)> t_1

  CLikeLanguageParenthesize :
    Add(t_0, t_1, t_2) -> Add(t_0, t_1, Parenthetical(t_2))
    where <(?Logic(_, _, _)
            + ?Add(_, _, _)
            + fail)> t_2

  CLikeLanguageParenthesize :
    Logic(t_0, t_1, t_2) -> Logic(t_0, t_1, Parenthetical(t_2))
    where <(?Logic(_, _, _) + fail)> t_2

  CLikeLanguageParenthesize :
    Separator(t_0, t_1) -> Separator(t_0, Parenthetical(t_1))
    where <(?Separator(_, _) + fail)> t_1


signature
  constructors
    Parenthetical : Unknown -> Unknown

