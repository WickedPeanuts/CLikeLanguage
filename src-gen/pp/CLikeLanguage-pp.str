module pp/CLikeLanguage-pp

imports
  libstratego-gpp
  libspoofax/sdf/pp
  libspoofax/term/origin
  libstratego-sglr
  signatures/CLikeLanguage-sig


imports
  signatures/Common-sig


imports
  pp/Common-pp


strategies
  prettyprint-example =
    prettyprint-CLikeLanguage

  prettyprint-CLikeLanguage =
    fail

  prettyprint-CLikeLanguage(|sort) =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-CLikeLanguage-start-symbols

  prettyprint-CLikeLanguage-start-symbols =
    fail


strategies
  prettyprint-CLikeLanguage-start-symbols =
    prettyprint-CLikeLanguage-Start


strategies
  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Start

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Program

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-GlobalVariable

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Structure

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Function

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-CodeBlock

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Statement

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-If

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-IfElse

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-IfHeader

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Variable

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Parameter

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Argument

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Expression

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Primitive

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-OperatorTerm

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-OperatorFactor

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-OperatorComparator

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-Type

  prettyprint-CLikeLanguage =
    prettyprint-CLikeLanguage-BasicFunction

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Start>
    where <?"Start"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Program>
    where <?"Program"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-GlobalVariable>
    where <?"GlobalVariable"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Structure>
    where <?"Structure"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Function>
    where <?"Function"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-CodeBlock>
    where <?"CodeBlock"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Statement>
    where <?"Statement"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-If>
    where <?"If"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-IfElse>
    where <?"IfElse"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-IfHeader>
    where <?"IfHeader"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Variable>
    where <?"Variable"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Parameter>
    where <?"Parameter"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Argument>
    where <?"Argument"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Expression>
    where <?"Expression"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Primitive>
    where <?"Primitive"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-OperatorTerm>
    where <?"OperatorTerm"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-OperatorFactor>
    where <?"OperatorFactor"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-OperatorComparator>
    where <?"OperatorComparator"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-Type>
    where <?"Type"> sort

  prettyprint-CLikeLanguage(|sort):
    t -> <prettyprint-CLikeLanguage-BasicFunction>
    where <?"BasicFunction"> sort

  prettyprint-CLikeLanguage-Start :
    Program(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("program ")
                               , t1__'
                               , S(" { ")
                               , t2__'
                               , S(" }")
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-CLikeLanguage-Program) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Start =
    ?Program(_, _)

  CLikeLanguage-get-indent :
    (t@Program(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Program(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Program(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Program :
    GlobalVariable(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-GlobalVariable) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Program =
    ?GlobalVariable(_)

  CLikeLanguage-get-indent :
    (t@GlobalVariable(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Program"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@GlobalVariable(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Program"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@GlobalVariable(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Program"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Program :
    Structure(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Structure) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Program =
    ?Structure(_)

  CLikeLanguage-get-indent :
    (t@Structure(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Program"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Structure(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Program"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Structure(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Program"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Program :
    Function(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Function) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Program =
    ?Function(_)

  CLikeLanguage-get-indent :
    (t@Function(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Program"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Function(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Program"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Function(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Program"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-GlobalVariable :
    GlobalDeclaration(t1__, t2__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [ t1__'
                                         , S(" ")
                                         , t2__'
                                         , S(" ;")
                                         ]
                                       )
                                     ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-GlobalVariable =
    ?GlobalDeclaration(_, _)

  CLikeLanguage-get-indent :
    (t@GlobalDeclaration(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"GlobalVariable"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@GlobalDeclaration(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"GlobalVariable"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@GlobalDeclaration(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"GlobalVariable"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-GlobalVariable :
    GlobalDeclarationArray(t1__, t2__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [ t1__'
                                              , S(" ")
                                              , t2__'
                                              , S(" [];")
                                              ]
                                            )
                                          ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-GlobalVariable =
    ?GlobalDeclarationArray(_, _)

  CLikeLanguage-get-indent :
    (t@GlobalDeclarationArray(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"GlobalVariable"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@GlobalDeclarationArray(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"GlobalVariable"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@GlobalDeclarationArray(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"GlobalVariable"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-GlobalVariable :
    GlobalDeclarationInst(t1__, t2__, t3__) -> [ H(
                                                   [SOpt(HS(), "0")]
                                                 , [ t1__'
                                                   , S(" ")
                                                   , t2__'
                                                   , S(" = ")
                                                   , t3__'
                                                   , S(" ;")
                                                   ]
                                                 )
                                               ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-CLikeLanguage-GlobalVariable =
    ?GlobalDeclarationInst(_, _, _)

  CLikeLanguage-get-indent :
    ( t@GlobalDeclarationInst(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"GlobalVariable"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    ( t@GlobalDeclarationInst(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"GlobalVariable"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    ( t@GlobalDeclarationInst(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"GlobalVariable"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Structure :
    Declaration(t1__, t2__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ S("struct ")
                                   , t1__'
                                   , S(" { ")
                                   , t2__'
                                   , S(" } ;")
                                   ]
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-CLikeLanguage-Variable) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Structure =
    ?Declaration(_, _)

  CLikeLanguage-get-indent :
    (t@Declaration(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Structure"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Declaration(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Structure"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Declaration(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Structure"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Function :
    Declaration(t1__, t2__, t3__, t4__) -> [ H(
                                               [SOpt(HS(), "0")]
                                             , [ t1__'
                                               , S(" ")
                                               , t2__'
                                               , S(" ( ")
                                               , t3__'
                                               , S(" ) ")
                                               , t4__'
                                               ]
                                             )
                                           ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-H-list(prettyprint-CLikeLanguage-Parameter) <+ pp-one-Z(prettyprint-completion-aux)> t3__
    with t4__' := <pp-one-Z(prettyprint-CLikeLanguage-CodeBlock) <+ pp-one-Z(prettyprint-completion-aux)> t4__

  is-CLikeLanguage-Function =
    ?Declaration(_, _, _, _)

  CLikeLanguage-get-indent :
    ( t@Declaration(t1__, t2__, t3__, t4__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Function"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    ( t@Declaration(t1__, t2__, t3__, t4__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Function"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    ( t@Declaration(t1__, t2__, t3__, t4__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Function"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           case ?4 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-CodeBlock :
    Block(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [ S("{ ")
                       , t1__'
                       , S(" }")
                       ]
                     )
                   ]
    with t1__' := <pp-H-list(prettyprint-CLikeLanguage-Statement) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-CodeBlock =
    ?Block(_)

  CLikeLanguage-get-indent :
    (t@Block(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"CodeBlock"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Block(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"CodeBlock"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Block(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"CodeBlock"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Statement :
    If(t1__) -> [ H(
                    [SOpt(HS(), "0")]
                  , [t1__']
                  )
                ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-If) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Statement =
    ?If(_)

  CLikeLanguage-get-indent :
    (t@If(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@If(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@If(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Statement :
    While(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("while ( ")
                             , t1__'
                             , S(" ) ")
                             , t2__'
                             ]
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-CodeBlock) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Statement =
    ?While(_, _)

  CLikeLanguage-get-indent :
    (t@While(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@While(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@While(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Statement :
    VariableDeclaration(t1__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [t1__']
                                   )
                                 ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Variable) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Statement =
    ?VariableDeclaration(_)

  CLikeLanguage-get-indent :
    (t@VariableDeclaration(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@VariableDeclaration(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@VariableDeclaration(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Statement :
    Attribution(t1__, t2__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ t1__'
                                   , S(" = ")
                                   , t2__'
                                   , S(" ;")
                                   ]
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Statement =
    ?Attribution(_, _)

  CLikeLanguage-get-indent :
    (t@Attribution(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Attribution(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Attribution(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Statement :
    Break() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("break;")]
                 )
               ]

  is-CLikeLanguage-Statement =
    ?Break()

  CLikeLanguage-get-indent :
    (t@Break(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Break(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Break(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Statement :
    Return(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ S("return ")
                        , t1__'
                        , S(" ;")
                        ]
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Statement =
    ?Return(_)

  CLikeLanguage-get-indent :
    (t@Return(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Return(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Return(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-If :
    Block(t1__, t2__, t3__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ t1__'
                                   , S(" ")
                                   , t2__'
                                   , S(" ")
                                   , t3__'
                                   ]
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-IfHeader) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-CodeBlock) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-option(
                     pp-one-Z(prettyprint-CLikeLanguage-IfElse) <+ pp-one-Z(prettyprint-completion-aux)
                   )> t3__

  is-CLikeLanguage-If =
    ?Block(_, _, _)

  CLikeLanguage-get-indent :
    ( t@Block(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"If"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    ( t@Block(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"If"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    ( t@Block(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"If"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-If :
    Single(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ t1__'
                                    , S(" ")
                                    , t2__'
                                    , S(" ")
                                    , t3__'
                                    ]
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-IfHeader) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-Statement) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-option(
                     pp-one-Z(prettyprint-CLikeLanguage-IfElse) <+ pp-one-Z(prettyprint-completion-aux)
                   )> t3__

  is-CLikeLanguage-If =
    ?Single(_, _, _)

  CLikeLanguage-get-indent :
    ( t@Single(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"If"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    ( t@Single(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"If"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    ( t@Single(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"If"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-IfElse :
    Block(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("else "), t1__']
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-CodeBlock) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-IfElse =
    ?Block(_)

  CLikeLanguage-get-indent :
    (t@Block(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"IfElse"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Block(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"IfElse"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Block(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"IfElse"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-IfElse :
    Single(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("else "), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Statement) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-IfElse =
    ?Single(_)

  CLikeLanguage-get-indent :
    (t@Single(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"IfElse"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Single(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"IfElse"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Single(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"IfElse"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-IfHeader :
    Declaration(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("if ( ")
                             , t1__'
                             , S(" )")
                             ]
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-IfHeader =
    ?Declaration(_)

  CLikeLanguage-get-indent :
    (t@Declaration(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"IfHeader"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Declaration(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"IfHeader"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Declaration(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"IfHeader"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Variable :
    Declaration(t1__, t2__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ t1__'
                                   , S(" ")
                                   , t2__'
                                   , S(" ;")
                                   ]
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Variable =
    ?Declaration(_, _)

  CLikeLanguage-get-indent :
    (t@Declaration(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Variable"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Declaration(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Variable"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Declaration(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Variable"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Variable :
    DeclarationArray(t1__, t2__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [ t1__'
                                        , S(" ")
                                        , t2__'
                                        , S(" [];")
                                        ]
                                      )
                                    ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Variable =
    ?DeclarationArray(_, _)

  CLikeLanguage-get-indent :
    (t@DeclarationArray(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Variable"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@DeclarationArray(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Variable"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@DeclarationArray(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Variable"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Variable :
    DeclarationInst(t1__, t2__, t3__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ t1__'
                                             , S(" ")
                                             , t2__'
                                             , S(" = ")
                                             , t3__'
                                             , S(" ;")
                                             ]
                                           )
                                         ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-CLikeLanguage-Variable =
    ?DeclarationInst(_, _, _)

  CLikeLanguage-get-indent :
    ( t@DeclarationInst(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Variable"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    ( t@DeclarationInst(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Variable"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    ( t@DeclarationInst(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Variable"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Parameter :
    Parameter(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Parameter =
    ?Parameter(_, _)

  CLikeLanguage-get-indent :
    (t@Parameter(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Parameter"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Parameter(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Parameter"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Parameter(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Parameter"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Parameter :
    Separator(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" , "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Parameter) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-Parameter) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Parameter =
    ?Separator(_, _)

  CLikeLanguage-get-indent :
    (t@Separator(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Parameter"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Separator(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Parameter"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Separator(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Parameter"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Argument :
    Parameter(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Argument =
    ?Parameter(_)

  CLikeLanguage-get-indent :
    (t@Parameter(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Argument"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Parameter(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Argument"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Parameter(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Argument"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Argument :
    Separator(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" , "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Argument =
    ?Separator(_, _)

  CLikeLanguage-get-indent :
    (t@Separator(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Argument"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Separator(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Argument"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Separator(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Argument"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Expression :
    Add(t1__, t2__, t3__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ t1__'
                                 , S(" ")
                                 , t2__'
                                 , S(" ")
                                 , t3__'
                                 ]
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-OperatorTerm) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-CLikeLanguage-Expression =
    ?Add(_, _, _)

  CLikeLanguage-get-indent :
    ( t@Add(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    ( t@Add(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    ( t@Add(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Expression :
    Mul(t1__, t2__, t3__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ t1__'
                                 , S(" ")
                                 , t2__'
                                 , S(" ")
                                 , t3__'
                                 ]
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-OperatorFactor) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-CLikeLanguage-Expression =
    ?Mul(_, _, _)

  CLikeLanguage-get-indent :
    ( t@Mul(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    ( t@Mul(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    ( t@Mul(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Expression :
    Logic(t1__, t2__, t3__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ t1__'
                                   , S(" ")
                                   , t2__'
                                   , S(" ")
                                   , t3__'
                                   ]
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-CLikeLanguage-OperatorComparator) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-CLikeLanguage-Expression =
    ?Logic(_, _, _)

  CLikeLanguage-get-indent :
    ( t@Logic(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    ( t@Logic(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    ( t@Logic(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Expression :
    Primitive(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Primitive) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Expression =
    ?Primitive(_)

  CLikeLanguage-get-indent :
    (t@Primitive(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Primitive(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Primitive(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Expression :
    Expression(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("( ")
                            , t1__'
                            , S(" )")
                            ]
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Expression =
    ?Expression(_)

  CLikeLanguage-get-indent :
    (t@Expression(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Expression(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Expression(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Primitive :
    Num(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-INT) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Primitive =
    ?Num(_)

  CLikeLanguage-get-indent :
    (t@Num(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Num(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Num(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Primitive :
    Char(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-CHAR) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Primitive =
    ?Char(_)

  CLikeLanguage-get-indent :
    (t@Char(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Char(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Char(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Primitive :
    Boolean(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__']
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-BOOLEAN) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Primitive =
    ?Boolean(_)

  CLikeLanguage-get-indent :
    (t@Boolean(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Boolean(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Boolean(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Primitive :
    Variable(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-Primitive =
    ?Variable(_)

  CLikeLanguage-get-indent :
    (t@Variable(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Variable(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Variable(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Primitive :
    Function(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ t1__'
                                , S(" ( ")
                                , t2__'
                                , S(" )")
                                ]
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-CLikeLanguage-Argument) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-Primitive =
    ?Function(_, _)

  CLikeLanguage-get-indent :
    (t@Function(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Function(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Function(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Primitive"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorTerm :
    Add() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("+")]
               )
             ]

  is-CLikeLanguage-OperatorTerm =
    ?Add()

  CLikeLanguage-get-indent :
    (t@Add(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorTerm"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Add(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorTerm"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Add(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorTerm"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorTerm :
    Sub() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("-")]
               )
             ]

  is-CLikeLanguage-OperatorTerm =
    ?Sub()

  CLikeLanguage-get-indent :
    (t@Sub(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorTerm"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Sub(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorTerm"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Sub(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorTerm"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorFactor :
    Mul() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("*")]
               )
             ]

  is-CLikeLanguage-OperatorFactor =
    ?Mul()

  CLikeLanguage-get-indent :
    (t@Mul(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorFactor"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Mul(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorFactor"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Mul(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorFactor"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorFactor :
    Div() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("/")]
               )
             ]

  is-CLikeLanguage-OperatorFactor =
    ?Div()

  CLikeLanguage-get-indent :
    (t@Div(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorFactor"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Div(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorFactor"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Div(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorFactor"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorComparator :
    Equal() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("==")]
                 )
               ]

  is-CLikeLanguage-OperatorComparator =
    ?Equal()

  CLikeLanguage-get-indent :
    (t@Equal(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Equal(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Equal(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorComparator :
    Diff() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("!=")]
                )
              ]

  is-CLikeLanguage-OperatorComparator =
    ?Diff()

  CLikeLanguage-get-indent :
    (t@Diff(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Diff(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Diff(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorComparator :
    GT() -> [ H(
                [SOpt(HS(), "0")]
              , [S(">")]
              )
            ]

  is-CLikeLanguage-OperatorComparator =
    ?GT()

  CLikeLanguage-get-indent :
    (t@GT(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@GT(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@GT(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorComparator :
    GTE() -> [ H(
                 [SOpt(HS(), "0")]
               , [S(">=")]
               )
             ]

  is-CLikeLanguage-OperatorComparator =
    ?GTE()

  CLikeLanguage-get-indent :
    (t@GTE(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@GTE(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@GTE(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorComparator :
    LT() -> [ H(
                [SOpt(HS(), "0")]
              , [S("<")]
              )
            ]

  is-CLikeLanguage-OperatorComparator =
    ?LT()

  CLikeLanguage-get-indent :
    (t@LT(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@LT(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@LT(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorComparator :
    LTE() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("<=")]
               )
             ]

  is-CLikeLanguage-OperatorComparator =
    ?LTE()

  CLikeLanguage-get-indent :
    (t@LTE(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@LTE(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@LTE(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorComparator :
    And() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("&&")]
               )
             ]

  is-CLikeLanguage-OperatorComparator =
    ?And()

  CLikeLanguage-get-indent :
    (t@And(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@And(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@And(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-OperatorComparator :
    Or() -> [ H(
                [SOpt(HS(), "0")]
              , [S("||")]
              )
            ]

  is-CLikeLanguage-OperatorComparator =
    ?Or()

  CLikeLanguage-get-indent :
    (t@Or(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Or(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Or(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OperatorComparator"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Type :
    Void() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("void")]
                )
              ]

  is-CLikeLanguage-Type =
    ?Void()

  CLikeLanguage-get-indent :
    (t@Void(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Void(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Void(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Type :
    Integer() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("int")]
                   )
                 ]

  is-CLikeLanguage-Type =
    ?Integer()

  CLikeLanguage-get-indent :
    (t@Integer(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Integer(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Integer(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Type :
    Char() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("char")]
                )
              ]

  is-CLikeLanguage-Type =
    ?Char()

  CLikeLanguage-get-indent :
    (t@Char(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Char(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Char(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-Type :
    Boolean() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("bool")]
                   )
                 ]

  is-CLikeLanguage-Type =
    ?Boolean()

  CLikeLanguage-get-indent :
    (t@Boolean(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@Boolean(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@Boolean(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-BasicFunction :
    printPrimitive(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ S("print ( ")
                                , t1__'
                                , S(" )")
                                ]
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-CLikeLanguage-Primitive) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-CLikeLanguage-BasicFunction =
    ?printPrimitive(_)

  CLikeLanguage-get-indent :
    (t@printPrimitive(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BasicFunction"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@printPrimitive(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BasicFunction"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@printPrimitive(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BasicFunction"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CLikeLanguage-BasicFunction :
    scan(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("scan ( ")
                            , t1__'
                            , S(" , ")
                            , t2__'
                            , S(" )")
                            ]
                          )
                        ]
    with t1__' := <pp-H-list(prettyprint-CLikeLanguage-INPUT) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-CLikeLanguage-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-CLikeLanguage-BasicFunction =
    ?scan(_, _)

  CLikeLanguage-get-indent :
    (t@scan(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BasicFunction"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  CLikeLanguage-get-separator :
    (t@scan(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BasicFunction"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  CLikeLanguage-get-leading-ws :
    (t@scan(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BasicFunction"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-CLikeLanguage-Start =
    fail

  is-CLikeLanguage-Program =
    fail

  is-CLikeLanguage-GlobalVariable =
    fail

  is-CLikeLanguage-Structure =
    fail

  is-CLikeLanguage-Function =
    fail

  is-CLikeLanguage-CodeBlock =
    fail

  is-CLikeLanguage-Statement =
    fail

  is-CLikeLanguage-If =
    fail

  is-CLikeLanguage-IfElse =
    fail

  is-CLikeLanguage-IfHeader =
    fail

  is-CLikeLanguage-Variable =
    fail

  is-CLikeLanguage-Parameter =
    fail

  is-CLikeLanguage-Argument =
    fail

  is-CLikeLanguage-Expression =
    fail

  is-CLikeLanguage-Primitive =
    fail

  is-CLikeLanguage-OperatorTerm =
    fail

  is-CLikeLanguage-OperatorFactor =
    fail

  is-CLikeLanguage-OperatorComparator =
    fail

  is-CLikeLanguage-Type =
    fail

  is-CLikeLanguage-BasicFunction =
    fail

  prettyprint-CLikeLanguage-Start :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Start> h

  prettyprint-CLikeLanguage-Program :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Program> h

  prettyprint-CLikeLanguage-GlobalVariable :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-GlobalVariable> h

  prettyprint-CLikeLanguage-Structure :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Structure> h

  prettyprint-CLikeLanguage-Function :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Function> h

  prettyprint-CLikeLanguage-CodeBlock :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-CodeBlock> h

  prettyprint-CLikeLanguage-Statement :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Statement> h

  prettyprint-CLikeLanguage-If :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-If> h

  prettyprint-CLikeLanguage-IfElse :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-IfElse> h

  prettyprint-CLikeLanguage-IfHeader :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-IfHeader> h

  prettyprint-CLikeLanguage-Variable :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Variable> h

  prettyprint-CLikeLanguage-Parameter :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Parameter> h

  prettyprint-CLikeLanguage-Argument :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Argument> h

  prettyprint-CLikeLanguage-Expression :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Expression> h

  prettyprint-CLikeLanguage-Primitive :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Primitive> h

  prettyprint-CLikeLanguage-OperatorTerm :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-OperatorTerm> h

  prettyprint-CLikeLanguage-OperatorFactor :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-OperatorFactor> h

  prettyprint-CLikeLanguage-OperatorComparator :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-OperatorComparator> h

  prettyprint-CLikeLanguage-Type :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-Type> h

  prettyprint-CLikeLanguage-BasicFunction :
    amb([h|hs]) -> <prettyprint-CLikeLanguage-BasicFunction> h

  prettyprint-CLikeLanguage-Start :
    Start-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Start")]
                       )
                     ]

  is-CLikeLanguage-Start =
    ?Start-Plhdr()

  prettyprint-CLikeLanguage-Program :
    Program-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Program")]
                         )
                       ]

  is-CLikeLanguage-Program =
    ?Program-Plhdr()

  prettyprint-CLikeLanguage-GlobalVariable :
    GlobalVariable-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$GlobalVariable")]
                                )
                              ]

  is-CLikeLanguage-GlobalVariable =
    ?GlobalVariable-Plhdr()

  prettyprint-CLikeLanguage-Structure :
    Structure-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Structure")]
                           )
                         ]

  is-CLikeLanguage-Structure =
    ?Structure-Plhdr()

  prettyprint-CLikeLanguage-Function :
    Function-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Function")]
                          )
                        ]

  is-CLikeLanguage-Function =
    ?Function-Plhdr()

  prettyprint-CLikeLanguage-If :
    If-Plhdr() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("$If")]
                    )
                  ]

  is-CLikeLanguage-If =
    ?If-Plhdr()

  prettyprint-CLikeLanguage-CodeBlock :
    CodeBlock-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$CodeBlock")]
                           )
                         ]

  is-CLikeLanguage-CodeBlock =
    ?CodeBlock-Plhdr()

  prettyprint-CLikeLanguage-IfElse :
    IfElse-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$IfElse")]
                        )
                      ]

  is-CLikeLanguage-IfElse =
    ?IfElse-Plhdr()

  prettyprint-CLikeLanguage-Statement :
    Statement-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Statement")]
                           )
                         ]

  is-CLikeLanguage-Statement =
    ?Statement-Plhdr()

  prettyprint-CLikeLanguage-IfHeader :
    IfHeader-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$IfHeader")]
                          )
                        ]

  is-CLikeLanguage-IfHeader =
    ?IfHeader-Plhdr()

  prettyprint-CLikeLanguage-Variable :
    Variable-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Variable")]
                          )
                        ]

  is-CLikeLanguage-Variable =
    ?Variable-Plhdr()

  prettyprint-CLikeLanguage-Parameter :
    Parameter-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Parameter")]
                           )
                         ]

  is-CLikeLanguage-Parameter =
    ?Parameter-Plhdr()

  prettyprint-CLikeLanguage-Expression :
    Expression-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Expression")]
                            )
                          ]

  is-CLikeLanguage-Expression =
    ?Expression-Plhdr()

  prettyprint-CLikeLanguage-INT :
    INT-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$INT")]
                     )
                   ]

  is-CLikeLanguage-INT =
    ?INT-Plhdr()

  prettyprint-CLikeLanguage-CHAR :
    CHAR-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$CHAR")]
                      )
                    ]

  is-CLikeLanguage-CHAR =
    ?CHAR-Plhdr()

  prettyprint-CLikeLanguage-BOOLEAN :
    BOOLEAN-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$BOOLEAN")]
                         )
                       ]

  is-CLikeLanguage-BOOLEAN =
    ?BOOLEAN-Plhdr()

  prettyprint-CLikeLanguage-Argument :
    Argument-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Argument")]
                          )
                        ]

  is-CLikeLanguage-Argument =
    ?Argument-Plhdr()

  prettyprint-CLikeLanguage-OperatorTerm :
    OperatorTerm-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$OperatorTerm")]
                              )
                            ]

  is-CLikeLanguage-OperatorTerm =
    ?OperatorTerm-Plhdr()

  prettyprint-CLikeLanguage-OperatorFactor :
    OperatorFactor-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$OperatorFactor")]
                                )
                              ]

  is-CLikeLanguage-OperatorFactor =
    ?OperatorFactor-Plhdr()

  prettyprint-CLikeLanguage-OperatorComparator :
    OperatorComparator-Plhdr() -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$OperatorComparator")]
                                    )
                                  ]

  is-CLikeLanguage-OperatorComparator =
    ?OperatorComparator-Plhdr()

  prettyprint-CLikeLanguage-Type :
    Type-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Type")]
                      )
                    ]

  is-CLikeLanguage-Type =
    ?Type-Plhdr()

  prettyprint-CLikeLanguage-Primitive :
    Primitive-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Primitive")]
                           )
                         ]

  is-CLikeLanguage-Primitive =
    ?Primitive-Plhdr()

  prettyprint-CLikeLanguage-BasicFunction :
    BasicFunction-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$BasicFunction")]
                               )
                             ]

  is-CLikeLanguage-BasicFunction =
    ?BasicFunction-Plhdr()

  prettyprint-CLikeLanguage-INPUT :
    INPUT-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$INPUT")]
                       )
                     ]

  is-CLikeLanguage-INPUT =
    ?INPUT-Plhdr()

  prettyprint-CLikeLanguage-ID :
    ID-Plhdr() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("$ID")]
                    )
                  ]

  is-CLikeLanguage-ID =
    ?ID-Plhdr()

  prettyprint-CLikeLanguage-Start :
    Start-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$Start")]
                        )
                      ]

  is-CLikeLanguage-Start =
    ?Start-Plhdr(_)

  prettyprint-CLikeLanguage-Program :
    Program-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Program")]
                          )
                        ]

  is-CLikeLanguage-Program =
    ?Program-Plhdr(_)

  prettyprint-CLikeLanguage-GlobalVariable :
    GlobalVariable-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$GlobalVariable")]
                                 )
                               ]

  is-CLikeLanguage-GlobalVariable =
    ?GlobalVariable-Plhdr(_)

  prettyprint-CLikeLanguage-Structure :
    Structure-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Structure")]
                            )
                          ]

  is-CLikeLanguage-Structure =
    ?Structure-Plhdr(_)

  prettyprint-CLikeLanguage-Function :
    Function-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Function")]
                           )
                         ]

  is-CLikeLanguage-Function =
    ?Function-Plhdr(_)

  prettyprint-CLikeLanguage-If :
    If-Plhdr(_) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$If")]
                     )
                   ]

  is-CLikeLanguage-If =
    ?If-Plhdr(_)

  prettyprint-CLikeLanguage-CodeBlock :
    CodeBlock-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$CodeBlock")]
                            )
                          ]

  is-CLikeLanguage-CodeBlock =
    ?CodeBlock-Plhdr(_)

  prettyprint-CLikeLanguage-IfElse :
    IfElse-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$IfElse")]
                         )
                       ]

  is-CLikeLanguage-IfElse =
    ?IfElse-Plhdr(_)

  prettyprint-CLikeLanguage-Statement :
    Statement-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Statement")]
                            )
                          ]

  is-CLikeLanguage-Statement =
    ?Statement-Plhdr(_)

  prettyprint-CLikeLanguage-IfHeader :
    IfHeader-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$IfHeader")]
                           )
                         ]

  is-CLikeLanguage-IfHeader =
    ?IfHeader-Plhdr(_)

  prettyprint-CLikeLanguage-Variable :
    Variable-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Variable")]
                           )
                         ]

  is-CLikeLanguage-Variable =
    ?Variable-Plhdr(_)

  prettyprint-CLikeLanguage-Parameter :
    Parameter-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Parameter")]
                            )
                          ]

  is-CLikeLanguage-Parameter =
    ?Parameter-Plhdr(_)

  prettyprint-CLikeLanguage-Expression :
    Expression-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$Expression")]
                             )
                           ]

  is-CLikeLanguage-Expression =
    ?Expression-Plhdr(_)

  prettyprint-CLikeLanguage-INT :
    INT-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$INT")]
                      )
                    ]

  is-CLikeLanguage-INT =
    ?INT-Plhdr(_)

  prettyprint-CLikeLanguage-CHAR :
    CHAR-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$CHAR")]
                       )
                     ]

  is-CLikeLanguage-CHAR =
    ?CHAR-Plhdr(_)

  prettyprint-CLikeLanguage-BOOLEAN :
    BOOLEAN-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$BOOLEAN")]
                          )
                        ]

  is-CLikeLanguage-BOOLEAN =
    ?BOOLEAN-Plhdr(_)

  prettyprint-CLikeLanguage-Argument :
    Argument-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Argument")]
                           )
                         ]

  is-CLikeLanguage-Argument =
    ?Argument-Plhdr(_)

  prettyprint-CLikeLanguage-OperatorTerm :
    OperatorTerm-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$OperatorTerm")]
                               )
                             ]

  is-CLikeLanguage-OperatorTerm =
    ?OperatorTerm-Plhdr(_)

  prettyprint-CLikeLanguage-OperatorFactor :
    OperatorFactor-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$OperatorFactor")]
                                 )
                               ]

  is-CLikeLanguage-OperatorFactor =
    ?OperatorFactor-Plhdr(_)

  prettyprint-CLikeLanguage-OperatorComparator :
    OperatorComparator-Plhdr(_) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$OperatorComparator")]
                                     )
                                   ]

  is-CLikeLanguage-OperatorComparator =
    ?OperatorComparator-Plhdr(_)

  prettyprint-CLikeLanguage-Type :
    Type-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Type")]
                       )
                     ]

  is-CLikeLanguage-Type =
    ?Type-Plhdr(_)

  prettyprint-CLikeLanguage-Primitive :
    Primitive-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Primitive")]
                            )
                          ]

  is-CLikeLanguage-Primitive =
    ?Primitive-Plhdr(_)

  prettyprint-CLikeLanguage-BasicFunction :
    BasicFunction-Plhdr(_) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$BasicFunction")]
                                )
                              ]

  is-CLikeLanguage-BasicFunction =
    ?BasicFunction-Plhdr(_)

  prettyprint-CLikeLanguage-INPUT :
    INPUT-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$INPUT")]
                        )
                      ]

  is-CLikeLanguage-INPUT =
    ?INPUT-Plhdr(_)

  prettyprint-CLikeLanguage-ID :
    ID-Plhdr(_) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$ID")]
                     )
                   ]

  is-CLikeLanguage-ID =
    ?ID-Plhdr(_)

  prettyprint-CLikeLanguage-Program :
    Program-Opt-Plhdr() -> [ H(
                               []
                             , [S("")]
                             )
                           ]

  is-CLikeLanguage-Program =
    ?Program-Opt-Plhdr()

  prettyprint-CLikeLanguage-Variable :
    Variable-Opt-Plhdr() -> [ H(
                                []
                              , [S("")]
                              )
                            ]

  is-CLikeLanguage-Variable =
    ?Variable-Opt-Plhdr()

  prettyprint-CLikeLanguage-Parameter :
    Parameter-Opt-Plhdr() -> [ H(
                                 []
                               , [S("")]
                               )
                             ]

  is-CLikeLanguage-Parameter =
    ?Parameter-Opt-Plhdr()

  prettyprint-CLikeLanguage-Statement :
    Statement-Opt-Plhdr() -> [ H(
                                 []
                               , [S("")]
                               )
                             ]

  is-CLikeLanguage-Statement =
    ?Statement-Opt-Plhdr()

  prettyprint-CLikeLanguage-IfElse :
    IfElse-Opt-Plhdr() -> [ H(
                              []
                            , [S("")]
                            )
                          ]

  is-CLikeLanguage-IfElse =
    ?IfElse-Opt-Plhdr()

  prettyprint-CLikeLanguage-Argument :
    Argument-Opt-Plhdr() -> [ H(
                                []
                              , [S("")]
                              )
                            ]

  is-CLikeLanguage-Argument =
    ?Argument-Opt-Plhdr()

  prettyprint-CLikeLanguage-INPUT :
    INPUT-Opt-Plhdr() -> [ H(
                             []
                           , [S("")]
                           )
                         ]

  is-CLikeLanguage-INPUT =
    ?INPUT-Opt-Plhdr()

  prettyprint-CLikeLanguage-ID :
    ID-Opt-Plhdr() -> [ H(
                          []
                        , [S("")]
                        )
                      ]

  is-CLikeLanguage-ID =
    ?ID-Opt-Plhdr()