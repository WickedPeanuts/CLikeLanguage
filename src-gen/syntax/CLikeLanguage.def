definition
module Common
exports
  lexical syntax
    [a-zA-Z] [a-zA-Z0-9]*    -> ID            
    BOOLEAN                  -> ID            {reject}
    "-"? [0-9]+              -> INT           
    "'" [a-zA-Z] "'"         -> CHAR          
    "true" | "false"         -> BOOLEAN       
    "\"" StringChar* "\""    -> STRING        
    "%c" | "%i" | "%s"       -> INPUT         
    ~[\"\n]                  -> StringChar    
    "\\\""                   -> StringChar    
    BackSlashChar            -> StringChar    
    "\\"                     -> BackSlashChar 
    [\ \t\n\r]               -> LAYOUT        
    [\*]                     -> CommentChar   
    "/*" InsideComment* "*/" -> LAYOUT        
    ~[\*]                    -> InsideComment 
    CommentChar              -> InsideComment 
    "//" ~[\n\r]* NewLineEOF -> LAYOUT        
    [\n\r]                   -> NewLineEOF    
    EOF                      -> NewLineEOF    
                             -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

module CLikeLanguage
imports Common

exports
  context-free start-symbols
    Start

  sorts Variable Expression Code Parameter

  context-free syntax
    "program" ID "{" Program* "}"             -> Start              {cons("Program")}
    Variable                                  -> Program            
    "struct" "{" Variable* "}" ID ";"         -> Program            {cons("Structure")}
    Type ID "(" Parameter* ")" CodeBlock      -> Program            {cons("Function")}
    "{" Statement* "}"                        -> CodeBlock          {cons("Block")}
    "if" "(" Expression ")" Statement IfElse? -> Statement          {cons("If")}
    "while" "(" Expression ")" Statement      -> Statement          {cons("While")}
    ID "=" Expression ";"                     -> Statement          {cons("Assignment")}
    "break;"                                  -> Statement          {cons("Break")}
    "return" Expression? ";"                  -> Statement          {cons("Return")}
    CodeBlock                                 -> Statement          
    "else" Statement                          -> IfElse             {cons("Single")}
    Type ID ";"                               -> Variable           {cons("Declaration")}
    Type ID "[" INT "];"                      -> Variable           {cons("DeclarationArray")}
    Type ID "=" Expression ";"                -> Variable           {cons("DeclarationInst")}
    Type ID                                   -> Parameter          {cons("SimpleParameter")}
    Parameter "," Parameter                   -> Parameter          {cons("ParamSeparator"), left}
    Expression                                -> Argument           {cons("SingleArgument")}
    Expression "," Expression                 -> Argument           {cons("ArguSeparator"), left}
    Expression OperatorTerm Expression        -> Expression         {cons("AddExpr"), left}
    Expression OperatorFactor Expression      -> Expression         {cons("MulExpr"), left}
    Expression OperatorComparator Expression  -> Expression         {cons("LogicExpr"), left}
    Primitive                                 -> Expression         
    "(" Expression ")"                        -> Expression         {cons("ParenthesisExpression")}
    INT                                       -> Primitive          
    CHAR                                      -> Primitive          
    BOOLEAN                                   -> Primitive          
    ID                                        -> Primitive          
    ID "(" Argument* ")"                      -> Primitive          {cons("PrimitiveFunction")}
    "+"                                       -> OperatorTerm       {cons("Add")}
    "-"                                       -> OperatorTerm       {cons("Sub")}
    "*"                                       -> OperatorFactor     {cons("Mul")}
    "/"                                       -> OperatorFactor     {cons("Div")}
    "=="                                      -> OperatorComparator {cons("Equal")}
    "!="                                      -> OperatorComparator {cons("Diff")}
    ">"                                       -> OperatorComparator {cons("GT")}
    ">="                                      -> OperatorComparator {cons("GTE")}
    "<"                                       -> OperatorComparator {cons("LT")}
    "<="                                      -> OperatorComparator {cons("LTE")}
    "&&"                                      -> OperatorComparator {cons("And")}
    "||"                                      -> OperatorComparator {cons("Or")}
    "void"                                    -> Type               {cons("Void")}
    "int"                                     -> Type               {cons("Integer")}
    "char"                                    -> Type               {cons("Char")}
    "bool"                                    -> Type               {cons("Boolean")}
    "print" "(" Primitive ")"                 -> BasicFunction      {cons("printPrimitive")}
    "scan" "(" INPUT* "," ID* ")"             -> BasicFunction      {cons("scan")}

  lexical syntax
    

  context-free syntax
    "$Start"              -> Start              {cons("Start-Plhdr"), placeholder}
    "$Program"            -> Program            {cons("Program-Plhdr"), placeholder}
    "$CodeBlock"          -> CodeBlock          {cons("CodeBlock-Plhdr"), placeholder}
    "$IfElse"             -> IfElse             {cons("IfElse-Plhdr"), placeholder}
    "$Statement"          -> Statement          {cons("Statement-Plhdr"), placeholder}
    "$Variable"           -> Variable           {cons("Variable-Plhdr"), placeholder}
    "$Parameter"          -> Parameter          {cons("Parameter-Plhdr"), placeholder}
    "$Expression"         -> Expression         {cons("Expression-Plhdr"), placeholder}
    "$INT"                -> INT                {cons("INT-Plhdr"), placeholder}
    "$CHAR"               -> CHAR               {cons("CHAR-Plhdr"), placeholder}
    "$BOOLEAN"            -> BOOLEAN            {cons("BOOLEAN-Plhdr"), placeholder}
    "$Argument"           -> Argument           {cons("Argument-Plhdr"), placeholder}
    "$OperatorTerm"       -> OperatorTerm       {cons("OperatorTerm-Plhdr"), placeholder}
    "$OperatorFactor"     -> OperatorFactor     {cons("OperatorFactor-Plhdr"), placeholder}
    "$OperatorComparator" -> OperatorComparator {cons("OperatorComparator-Plhdr"), placeholder}
    "$Type"               -> Type               {cons("Type-Plhdr"), placeholder}
    "$Primitive"          -> Primitive          {cons("Primitive-Plhdr"), placeholder}
    "$BasicFunction"      -> BasicFunction      {cons("BasicFunction-Plhdr"), placeholder}
    "$INPUT"              -> INPUT              {cons("INPUT-Plhdr"), placeholder}
    "$ID"                 -> ID                 {cons("ID-Plhdr"), placeholder}

  context-free priorities
    Expression OperatorFactor Expression -> Expression >
    {left:
      Expression OperatorTerm Expression -> Expression
    } >
    Expression OperatorComparator Expression -> Expression