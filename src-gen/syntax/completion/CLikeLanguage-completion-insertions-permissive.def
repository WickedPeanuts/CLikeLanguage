definition

module completion/Common-completion-insertions
imports Common

exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    [A-Za-z0-9\_]                  -> WATERTOKENSTART     {recover, avoid}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover, avoid}
    "*"                            -> WATERTOKENSTAR      {recover, avoid}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               
                                   -> WATEREOF            

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                           
    "'"                                  -> INSERTOPENQUOTE       {recover}
    INSERTOPENQUOTE [a-zA-Z] "\n"        -> CHAR                  {cons("INSERTEND")}
    INSERTOPENQUOTE [a-zA-Z] WATEREOF    -> CHAR                  {cons("INSERTEND")}
                                         -> "'"                   {recover, cons("INSERTION")}
                                         -> "true"                {recover, cons("INSERTION")}
                                         -> "false"               {recover, cons("INSERTION")}
    "\""                                 -> INSERTOPENQUOTE       {recover}
    INSERTOPENQUOTE StringChar* "\n"     -> STRING                {cons("INSERTEND")}
    INSERTOPENQUOTE StringChar* WATEREOF -> STRING                {cons("INSERTEND")}
                                         -> "%c"                  {recover, cons("INSERTION")}
                                         -> "%i"                  {recover, cons("INSERTION")}
                                         -> "%s"                  {recover, cons("INSERTION")}
    "/*"                                 -> INSERTSTART           {recover}
    INSERTSTART InsideComment* WATEREOF  -> LAYOUT                {cons("INSERTEND")}
                                         -> "program"             {recover, cons("INSERTION")}
                                         -> "struct"              {recover, cons("INSERTION")}
                                         -> "{"                   {recover, cons("INSERTION")}
                                         -> "]"                   {recover, cons("INSERTION")}
                                         -> "}"                   {recover, cons("INSERTION")}
                                         -> "["                   {recover, cons("INSERTION")}
                                         -> "];"                  {recover, cons("INSERTION")}
                                         -> "="                   {recover, cons("INSERTION")}
                                         -> ";"                   {recover, cons("INSERTION")}
                                         -> "+"                   {recover, cons("INSERTION")}
                                         -> "-"                   {recover, cons("INSERTION")}
                                         -> "*"                   {recover, cons("INSERTION")}
                                         -> "/"                   {recover, cons("INSERTION")}
                                         -> "=="                  {recover, cons("INSERTION")}
                                         -> "!="                  {recover, cons("INSERTION")}
                                         -> ">"                   {recover, cons("INSERTION")}
                                         -> ">="                  {recover, cons("INSERTION")}
                                         -> "<"                   {recover, cons("INSERTION")}
                                         -> "<="                  {recover, cons("INSERTION")}
                                         -> "&&"                  {recover, cons("INSERTION")}
                                         -> "||"                  {recover, cons("INSERTION")}
                                         -> "void"                {recover, cons("INSERTION")}
                                         -> "int"                 {recover, cons("INSERTION")}
                                         -> "char"                {recover, cons("INSERTION")}
                                         -> "bool"                {recover, cons("INSERTION")}
                                         -> "print"               {recover, cons("INSERTION")}
                                         -> "scan"                {recover, cons("INSERTION")}
                                         -> "("                   {recover, cons("INSERTION")}
                                         -> ","                   {recover, cons("INSERTION")}
                                         -> ")"                   {recover, cons("INSERTION")}
                                         -> "$Start"              {recover, cons("INSERTION")}
                                         -> "$Program"            {recover, cons("INSERTION")}
                                         -> "$Variable"           {recover, cons("INSERTION")}
                                         -> "$INT"                {recover, cons("INSERTION")}
                                         -> "$CHAR"               {recover, cons("INSERTION")}
                                         -> "$BOOLEAN"            {recover, cons("INSERTION")}
                                         -> "$OperatorTerm"       {recover, cons("INSERTION")}
                                         -> "$OperatorFactor"     {recover, cons("INSERTION")}
                                         -> "$OperatorComparator" {recover, cons("INSERTION")}
                                         -> "$Type"               {recover, cons("INSERTION")}
                                         -> "$BasicFunction"      {recover, cons("INSERTION")}
                                         -> "$INPUT"              {recover, cons("INSERTION")}
                                         -> "$ID"                 {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  lexical syntax
     -> COMPLETION-INSERTION 

module Common
exports
  lexical syntax
    "-"? [0-9]+              -> INT           
    [a-zA-Z] [a-zA-Z0-9]*    -> ID            
    BOOLEAN                  -> ID            {reject}
    "'" [a-zA-Z] "'"         -> CHAR          
    "true" | "false"         -> BOOLEAN       
    "\"" StringChar* "\""    -> STRING        
    "%c" | "%i" | "%s"       -> INPUT         
    ~[\"\n]                  -> StringChar    
    "\\\""                   -> StringChar    
    BackSlashChar            -> StringChar    
    "\\"                     -> BackSlashChar 
    [\ \t\n\r]               -> LAYOUT        
    [\*]                     -> CommentChar   
    "/*" InsideComment* "*/" -> LAYOUT        
    ~[\*]                    -> InsideComment 
    CommentChar              -> InsideComment 
    "//" ~[\n\r]* NewLineEOF -> LAYOUT        
    [\n\r]                   -> NewLineEOF    
    EOF                      -> NewLineEOF    
                             -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

module CLikeLanguage
imports Common

exports
  context-free start-symbols
    Start

  sorts Variable Expression Code Parameter

  context-free syntax
    "program" ID "{" Program* "}"                 -> Start              {cons("Program")}
    Variable                                      -> Program            
    "struct" "{" Variable* "}" ID ";"             -> Program            {cons("Structure")}
    "struct" "{" Variable* "}" ID "[" INT "]" ";" -> Program            {cons("StructureArray")}
    Type ID "(" Parameter* ")" CodeBlock          -> Program            {cons("Function")}
    "{" Statement* "}"                            -> CodeBlock          {cons("Block")}
    "if" "(" Expression ")" Statement IfElse?     -> Statement          {cons("If")}
    "while" "(" Expression ")" Statement          -> Statement          {cons("While")}
    LeftExpr "=" RightExpr ";"                    -> Statement          {cons("Assignment")}
    "break;"                                      -> Statement          {cons("Break")}
    "return" Expression? ";"                      -> Statement          {cons("Return")}
    CodeBlock                                     -> Statement          
    "else" Statement                              -> IfElse             {cons("Single")}
    Type ID ";"                                   -> Variable           {cons("Declaration")}
    Type ID "[" INT "];"                          -> Variable           {cons("DeclarationArray")}
    Type ID "=" Primitive ";"                     -> Variable           {cons("DeclarationInst")}
    Type ID                                       -> Parameter          {cons("SimpleParameter")}
    Parameter "," Parameter                       -> Parameter          {cons("ParamSeparator"), left}
    Expression                                    -> Argument           {cons("SingleArgument")}
    Expression "," Expression                     -> Argument           {cons("ArguSeparator"), left}
    Expression OperatorTerm Expression            -> Expression         {cons("AddExpr"), left}
    Expression OperatorFactor Expression          -> Expression         {cons("MulExpr"), left}
    Expression OperatorComparator Expression      -> Expression         {cons("LogicExpr"), left}
    "(" Expression ")"                            -> Expression         {cons("ParenthesisExpression")}
    Primitive                                     -> Expression         
    INT                                           -> Primitive          {cons("IntegerPrim")}
    CHAR                                          -> Primitive          {cons("CharPrim")}
    BOOLEAN                                       -> Primitive          {cons("BoolPrim")}
    ID "(" Argument* ")"                          -> Primitive          {cons("PrimitiveFunction")}
    ID                                            -> LeftExpr           {cons("VariableCall")}
    LeftExpr "[" RightExpr "]"                    -> LeftExpr           {cons("ArrayCall")}
    LeftExpr "." ID                               -> LeftExpr           {cons("FieldCall")}
    LeftExpr                                      -> RightExpr          {cons("LeftExpressionTerm")}
    Expression                                    -> RightExpr          {cons("ExpressionTerm")}
    "+"                                           -> OperatorTerm       {cons("Add")}
    "-"                                           -> OperatorTerm       {cons("Sub")}
    "*"                                           -> OperatorFactor     {cons("Mul")}
    "/"                                           -> OperatorFactor     {cons("Div")}
    "=="                                          -> OperatorComparator {cons("Equal")}
    "!="                                          -> OperatorComparator {cons("Diff")}
    ">"                                           -> OperatorComparator {cons("GT")}
    ">="                                          -> OperatorComparator {cons("GTE")}
    "<"                                           -> OperatorComparator {cons("LT")}
    "<="                                          -> OperatorComparator {cons("LTE")}
    "&&"                                          -> OperatorComparator {cons("And")}
    "||"                                          -> OperatorComparator {cons("Or")}
    "void"                                        -> Type               {cons("Void")}
    "int"                                         -> Type               {cons("Integer")}
    "char"                                        -> Type               {cons("Char")}
    "bool"                                        -> Type               {cons("Boolean")}
    "print" "(" Primitive ")"                     -> BasicFunction      {cons("printPrimitive")}
    "scan" "(" INPUT* "," ID* ")"                 -> BasicFunction      {cons("scan")}

  lexical syntax
    

  context-free syntax
    "$Start"              -> Start              {cons("Start-Plhdr"), placeholder}
    "$Program"            -> Program            {cons("Program-Plhdr"), placeholder}
    "$CodeBlock"          -> CodeBlock          {cons("CodeBlock-Plhdr"), placeholder}
    "$IfElse"             -> IfElse             {cons("IfElse-Plhdr"), placeholder}
    "$Statement"          -> Statement          {cons("Statement-Plhdr"), placeholder}
    "$Variable"           -> Variable           {cons("Variable-Plhdr"), placeholder}
    "$Parameter"          -> Parameter          {cons("Parameter-Plhdr"), placeholder}
    "$INT"                -> INT                {cons("INT-Plhdr"), placeholder}
    "$CHAR"               -> CHAR               {cons("CHAR-Plhdr"), placeholder}
    "$BOOLEAN"            -> BOOLEAN            {cons("BOOLEAN-Plhdr"), placeholder}
    "$Argument"           -> Argument           {cons("Argument-Plhdr"), placeholder}
    "$LeftExpr"           -> LeftExpr           {cons("LeftExpr-Plhdr"), placeholder}
    "$RightExpr"          -> RightExpr          {cons("RightExpr-Plhdr"), placeholder}
    "$Expression"         -> Expression         {cons("Expression-Plhdr"), placeholder}
    "$OperatorTerm"       -> OperatorTerm       {cons("OperatorTerm-Plhdr"), placeholder}
    "$OperatorFactor"     -> OperatorFactor     {cons("OperatorFactor-Plhdr"), placeholder}
    "$OperatorComparator" -> OperatorComparator {cons("OperatorComparator-Plhdr"), placeholder}
    "$Type"               -> Type               {cons("Type-Plhdr"), placeholder}
    "$Primitive"          -> Primitive          {cons("Primitive-Plhdr"), placeholder}
    "$BasicFunction"      -> BasicFunction      {cons("BasicFunction-Plhdr"), placeholder}
    "$INPUT"              -> INPUT              {cons("INPUT-Plhdr"), placeholder}
    "$ID"                 -> ID                 {cons("ID-Plhdr"), placeholder}

  context-free priorities
    Expression OperatorFactor Expression -> Expression >
    {left:
      Expression OperatorTerm Expression -> Expression
    } >
    Expression OperatorComparator Expression -> Expression

module completion/CLikeLanguage-completion-insertions
imports CLikeLanguage

imports completion/Common-completion-insertions

exports
  context-free start-symbols
    Start Program CodeBlock IfElse Statement Variable Parameter INT CHAR BOOLEAN
    Argument LeftExpr RightExpr Expression OperatorTerm OperatorFactor
    OperatorComparator Type Primitive BasicFunction INPUT ID

  context-free syntax
    COMPLETION-INSERTION -> Start              {cons("Start-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Program            {cons("Program-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> CodeBlock          {cons("CodeBlock-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> IfElse             {cons("IfElse-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Statement          {cons("Statement-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Variable           {cons("Variable-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Parameter          {cons("Parameter-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> INT                {cons("INT-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> CHAR               {cons("CHAR-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BOOLEAN            {cons("BOOLEAN-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Argument           {cons("Argument-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> LeftExpr           {cons("LeftExpr-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> RightExpr          {cons("RightExpr-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Expression         {cons("Expression-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> OperatorTerm       {cons("OperatorTerm-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> OperatorFactor     {cons("OperatorFactor-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> OperatorComparator {cons("OperatorComparator-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Type               {cons("Type-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Primitive          {cons("Primitive-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BasicFunction      {cons("BasicFunction-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> INPUT              {cons("INPUT-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ID                 {cons("ID-Plhdr"), placeholder-insertion}

  lexical syntax
    COMPLETION-INSERTION -> "program" {literal-completion}
    COMPLETION-INSERTION -> "struct"  {literal-completion}
    COMPLETION-INSERTION -> "{"       {literal-completion}
    COMPLETION-INSERTION -> "}"       {literal-completion}
    COMPLETION-INSERTION -> "if"      {literal-completion}
    COMPLETION-INSERTION -> "while"   {literal-completion}
    COMPLETION-INSERTION -> "break;"  {literal-completion}
    COMPLETION-INSERTION -> "return"  {literal-completion}
    COMPLETION-INSERTION -> "else"    {literal-completion}
    COMPLETION-INSERTION -> "];"      {literal-completion}
    COMPLETION-INSERTION -> "="       {literal-completion}
    COMPLETION-INSERTION -> ";"       {literal-completion}
    COMPLETION-INSERTION -> "["       {literal-completion}
    COMPLETION-INSERTION -> "]"       {literal-completion}
    COMPLETION-INSERTION -> "."       {literal-completion}
    COMPLETION-INSERTION -> "+"       {literal-completion}
    COMPLETION-INSERTION -> "-"       {literal-completion}
    COMPLETION-INSERTION -> "*"       {literal-completion}
    COMPLETION-INSERTION -> "/"       {literal-completion}
    COMPLETION-INSERTION -> "=="      {literal-completion}
    COMPLETION-INSERTION -> "!="      {literal-completion}
    COMPLETION-INSERTION -> ">"       {literal-completion}
    COMPLETION-INSERTION -> ">="      {literal-completion}
    COMPLETION-INSERTION -> "<"       {literal-completion}
    COMPLETION-INSERTION -> "<="      {literal-completion}
    COMPLETION-INSERTION -> "&&"      {literal-completion}
    COMPLETION-INSERTION -> "||"      {literal-completion}
    COMPLETION-INSERTION -> "void"    {literal-completion}
    COMPLETION-INSERTION -> "int"     {literal-completion}
    COMPLETION-INSERTION -> "char"    {literal-completion}
    COMPLETION-INSERTION -> "bool"    {literal-completion}
    COMPLETION-INSERTION -> "print"   {literal-completion}
    COMPLETION-INSERTION -> "scan"    {literal-completion}
    COMPLETION-INSERTION -> "("       {literal-completion}
    COMPLETION-INSERTION -> ","       {literal-completion}
    COMPLETION-INSERTION -> ")"       {literal-completion}

exports
  lexical syntax
     -> COMPLETION-INSERTION 