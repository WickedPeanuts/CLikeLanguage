module ds-signatures/CLikeLanguage-sig

imports ds-signatures/Common-sig

signature
    sorts
      Start
      Program
      GlobalVariable
      Structure
      Function
      CodeBlock
      Statement
      If
      IfElse
      IfHeader
      Variable
      Parameter
      Argument
      Expression
      Primitive
      OperatorTerm
      OperatorFactor
      OperatorComparator
      Type
      BasicFunction
    constructors
      Program : ID * List(Program) -> Start 
      GlobalVariable : GlobalVariable -> Program 
      Structure : Structure -> Program 
      Function : Function -> Program 
      GlobalDeclaration : Type * ID -> GlobalVariable 
      GlobalDeclarationArray : Type * ID -> GlobalVariable 
      GlobalDeclarationInst : Type * ID * Expression -> GlobalVariable 
      Declaration : ID * List(Variable) -> Structure 
      Declaration : Type * ID * List(Parameter) * CodeBlock -> Function 
      Block : List(Statement) -> CodeBlock 
      If : If -> Statement 
      While : Expression * CodeBlock -> Statement 
      VariableDeclaration : Variable -> Statement 
      Attribution : ID * Expression -> Statement 
      Break : Statement 
      Return : Expression -> Statement 
      Block : IfHeader * CodeBlock * IfElse -> If 
      Single : IfHeader * Statement * IfElse -> If 
      Block : CodeBlock -> IfElse 
      Single : Statement -> IfElse 
      Declaration : Expression -> IfHeader 
      Declaration : Type * ID -> Variable 
      DeclarationArray : Type * ID -> Variable 
      DeclarationInst : Type * ID * Expression -> Variable 
      Parameter : Type * ID -> Parameter 
      Separator : Parameter * Parameter -> Parameter 
      Parameter : Expression -> Argument 
      Separator : Expression * Expression -> Argument 
      Add : Expression * OperatorTerm * Expression -> Expression 
      Mul : Expression * OperatorFactor * Expression -> Expression 
      Logic : Expression * OperatorComparator * Expression -> Expression 
      Primitive : Primitive -> Expression 
      Expression : Expression -> Expression 
      Num : INT -> Primitive 
      Char : CHAR -> Primitive 
      Boolean : BOOLEAN -> Primitive 
      Variable : ID -> Primitive 
      Function : ID * List(Argument) -> Primitive 
      Add : OperatorTerm 
      Sub : OperatorTerm 
      Mul : OperatorFactor 
      Div : OperatorFactor 
      Equal : OperatorComparator 
      Diff : OperatorComparator 
      GT : OperatorComparator 
      GTE : OperatorComparator 
      LT : OperatorComparator 
      LTE : OperatorComparator 
      And : OperatorComparator 
      Or : OperatorComparator 
      Void : Type 
      Integer : Type 
      Char : Type 
      Boolean : Type 
      printPrimitive : Primitive -> BasicFunction 
      scan : List(INPUT) * List(ID) -> BasicFunction 