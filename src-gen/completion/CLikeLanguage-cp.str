module completion/CLikeLanguage-cp

imports
  libstratego-gpp
  libspoofax/editor/completion/-


imports
  signatures/CLikeLanguage-sig


imports
  completion/Common-cp


rules

  suggest-completions(|completions):
    Start-Plhdr() -> <add-completions(
                      | ( "Program"
                        , Program(
                            <try(inline-completions(|Start-Plhdr()))> ID-Plhdr()
                          , CURSOR_ELEMENT()
                          )
                        )
                      )
                      ; fail> completions

  suggest-completions(|completions):
    Program-Plhdr() -> <suggest-completions(|completions)> Variable-Plhdr()
    where <not(is-expanded)> (Program-Plhdr(), Variable-Plhdr())
          ; rules (
              is-expanded :
                (Program-Plhdr(), Variable-Plhdr()) -> <id>
            )

  suggest-completions(|completions):
    Program-Plhdr() -> <add-completions(
                        | ( "Structure"
                          , Structure(
                              CURSOR_ELEMENT()
                            , <try(inline-completions(|Program-Plhdr()))> ID-Plhdr()
                            )
                          )
                        )
                        ; fail> completions

  suggest-completions(|completions):
    Program-Plhdr() -> <add-completions(
                        | ( "StructureArray"
                          , StructureArray(
                              CURSOR_ELEMENT()
                            , <try(inline-completions(|Program-Plhdr()))> ID-Plhdr()
                            , <try(inline-completions(|Program-Plhdr()))> INT-Plhdr()
                            )
                          )
                        )
                        ; fail> completions

  suggest-completions(|completions):
    Program-Plhdr() -> <add-completions(
                        | ( "Function"
                          , Function(
                              <try(inline-completions(|Program-Plhdr()))> Type-Plhdr()
                            , <try(inline-completions(|Program-Plhdr()))> ID-Plhdr()
                            , CURSOR_ELEMENT()
                            , <try(inline-completions(|Program-Plhdr()))> CodeBlock-Plhdr()
                            )
                          )
                        )
                        ; fail> completions

  suggest-completions(|completions):
    CodeBlock-Plhdr() -> <add-completions(
                          | ("Block", Block(CURSOR_ELEMENT()))
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Statement-Plhdr() -> <add-completions(
                          | ( "If"
                            , If(
                                <try(inline-completions(|Statement-Plhdr()))> Expression-Plhdr()
                              , <try(inline-completions(|Statement-Plhdr()))> Statement-Plhdr()
                              , Some(CURSOR_ELEMENT())
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Statement-Plhdr() -> <add-completions(
                          | ( "While"
                            , While(
                                <try(inline-completions(|Statement-Plhdr()))> Expression-Plhdr()
                              , <try(inline-completions(|Statement-Plhdr()))> Statement-Plhdr()
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Statement-Plhdr() -> <add-completions(
                          | ( "Assignment"
                            , Assignment(
                                <try(inline-completions(|Statement-Plhdr()))> LeftExpr-Plhdr()
                              , <try(inline-completions(|Statement-Plhdr()))> RightExpr-Plhdr()
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Statement-Plhdr() -> <add-completions(|("Break", Break()))
                          ; fail> completions

  suggest-completions(|completions):
    Statement-Plhdr() -> <add-completions(
                          | ( "Return"
                            , Return(Some(CURSOR_ELEMENT()))
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Statement-Plhdr() -> <suggest-completions(|completions)> CodeBlock-Plhdr()
    where <not(is-expanded)> (Statement-Plhdr(), CodeBlock-Plhdr())
          ; rules (
              is-expanded :
                (Statement-Plhdr(), CodeBlock-Plhdr()) -> <id>
            )

  suggest-completions(|completions):
    IfElse-Plhdr() -> <add-completions(
                       | ( "Single"
                         , Single(
                             <try(inline-completions(|IfElse-Plhdr()))> Statement-Plhdr()
                           )
                         )
                       )
                       ; fail> completions

  suggest-completions(|completions):
    Variable-Plhdr() -> <add-completions(
                         | ( "Declaration"
                           , Declaration(
                               <try(inline-completions(|Variable-Plhdr()))> Type-Plhdr()
                             , <try(inline-completions(|Variable-Plhdr()))> ID-Plhdr()
                             )
                           )
                         )
                         ; fail> completions

  suggest-completions(|completions):
    Variable-Plhdr() -> <add-completions(
                         | ( "DeclarationArray"
                           , DeclarationArray(
                               <try(inline-completions(|Variable-Plhdr()))> Type-Plhdr()
                             , <try(inline-completions(|Variable-Plhdr()))> ID-Plhdr()
                             , <try(inline-completions(|Variable-Plhdr()))> INT-Plhdr()
                             )
                           )
                         )
                         ; fail> completions

  suggest-completions(|completions):
    Variable-Plhdr() -> <add-completions(
                         | ( "DeclarationInst"
                           , DeclarationInst(
                               <try(inline-completions(|Variable-Plhdr()))> Type-Plhdr()
                             , <try(inline-completions(|Variable-Plhdr()))> ID-Plhdr()
                             , <try(inline-completions(|Variable-Plhdr()))> Primitive-Plhdr()
                             )
                           )
                         )
                         ; fail> completions

  suggest-completions(|completions):
    Parameter-Plhdr() -> <add-completions(
                          | ( "SimpleParameter"
                            , SimpleParameter(
                                <try(inline-completions(|Parameter-Plhdr()))> Type-Plhdr()
                              , <try(inline-completions(|Parameter-Plhdr()))> ID-Plhdr()
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Parameter-Plhdr() -> <add-completions(
                          | ( "ParamSeparator"
                            , ParamSeparator(
                                <try(inline-completions(|Parameter-Plhdr()))> Parameter-Plhdr()
                              , <try(inline-completions(|Parameter-Plhdr()))> Parameter-Plhdr()
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Argument-Plhdr() -> <add-completions(
                         | ( "SingleArgument"
                           , SingleArgument(
                               <try(inline-completions(|Argument-Plhdr()))> Expression-Plhdr()
                             )
                           )
                         )
                         ; fail> completions

  suggest-completions(|completions):
    Argument-Plhdr() -> <add-completions(
                         | ( "ArguSeparator"
                           , ArguSeparator(
                               <try(inline-completions(|Argument-Plhdr()))> Expression-Plhdr()
                             , <try(inline-completions(|Argument-Plhdr()))> Expression-Plhdr()
                             )
                           )
                         )
                         ; fail> completions

  suggest-completions(|completions):
    Expression-Plhdr() -> <add-completions(
                           | ( "AddExpr"
                             , AddExpr(
                                 <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                               , <try(inline-completions(|Expression-Plhdr()))> OperatorTerm-Plhdr()
                               , <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                               )
                             )
                           )
                           ; fail> completions

  suggest-completions(|completions):
    Expression-Plhdr() -> <add-completions(
                           | ( "MulExpr"
                             , MulExpr(
                                 <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                               , <try(inline-completions(|Expression-Plhdr()))> OperatorFactor-Plhdr()
                               , <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                               )
                             )
                           )
                           ; fail> completions

  suggest-completions(|completions):
    Expression-Plhdr() -> <add-completions(
                           | ( "LogicExpr"
                             , LogicExpr(
                                 <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                               , <try(inline-completions(|Expression-Plhdr()))> OperatorComparator-Plhdr()
                               , <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                               )
                             )
                           )
                           ; fail> completions

  suggest-completions(|completions):
    Expression-Plhdr() -> <add-completions(
                           | ( "ParenthesisExpression"
                             , ParenthesisExpression(
                                 <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                               )
                             )
                           )
                           ; fail> completions

  suggest-completions(|completions):
    Expression-Plhdr() -> <suggest-completions(|completions)> Primitive-Plhdr()
    where <not(is-expanded)> (Expression-Plhdr(), Primitive-Plhdr())
          ; rules (
              is-expanded :
                (Expression-Plhdr(), Primitive-Plhdr()) -> <id>
            )

  suggest-completions(|completions):
    Expression-Plhdr() -> <suggest-completions(|completions)> LeftExpr-Plhdr()
    where <not(is-expanded)> (Expression-Plhdr(), LeftExpr-Plhdr())
          ; rules (
              is-expanded :
                (Expression-Plhdr(), LeftExpr-Plhdr()) -> <id>
            )

  suggest-completions(|completions):
    Primitive-Plhdr() -> <add-completions(
                          | ( "IntegerPrim"
                            , IntegerPrim(
                                <try(inline-completions(|Primitive-Plhdr()))> INT-Plhdr()
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Primitive-Plhdr() -> <add-completions(
                          | ( "CharPrim"
                            , CharPrim(
                                <try(inline-completions(|Primitive-Plhdr()))> CHAR-Plhdr()
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Primitive-Plhdr() -> <add-completions(
                          | ( "BoolPrim"
                            , BoolPrim(
                                <try(inline-completions(|Primitive-Plhdr()))> BOOLEAN-Plhdr()
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    Primitive-Plhdr() -> <add-completions(
                          | ( "PrimitiveFunction"
                            , PrimitiveFunction(
                                <try(inline-completions(|Primitive-Plhdr()))> ID-Plhdr()
                              , CURSOR_ELEMENT()
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    LeftExpr-Plhdr() -> <add-completions(
                         | ( "VariableCall"
                           , VariableCall(
                               <try(inline-completions(|LeftExpr-Plhdr()))> ID-Plhdr()
                             )
                           )
                         )
                         ; fail> completions

  suggest-completions(|completions):
    LeftExpr-Plhdr() -> <add-completions(
                         | ( "ArrayCall"
                           , ArrayCall(
                               <try(inline-completions(|LeftExpr-Plhdr()))> LeftExpr-Plhdr()
                             , <try(inline-completions(|LeftExpr-Plhdr()))> RightExpr-Plhdr()
                             )
                           )
                         )
                         ; fail> completions

  suggest-completions(|completions):
    LeftExpr-Plhdr() -> <add-completions(
                         | ( "FieldCall"
                           , FieldCall(
                               <try(inline-completions(|LeftExpr-Plhdr()))> LeftExpr-Plhdr()
                             , <try(inline-completions(|LeftExpr-Plhdr()))> ID-Plhdr()
                             )
                           )
                         )
                         ; fail> completions

  suggest-completions(|completions):
    RightExpr-Plhdr() -> <add-completions(
                          | ( "ExpressionTerm"
                            , ExpressionTerm(
                                <try(inline-completions(|RightExpr-Plhdr()))> Expression-Plhdr()
                              )
                            )
                          )
                          ; fail> completions

  suggest-completions(|completions):
    OperatorTerm-Plhdr() -> <add-completions(|("Add", Add()))
                             ; fail> completions

  suggest-completions(|completions):
    OperatorTerm-Plhdr() -> <add-completions(|("Sub", Sub()))
                             ; fail> completions

  suggest-completions(|completions):
    OperatorFactor-Plhdr() -> <add-completions(|("Mul", Mul()))
                               ; fail> completions

  suggest-completions(|completions):
    OperatorFactor-Plhdr() -> <add-completions(|("Div", Div()))
                               ; fail> completions

  suggest-completions(|completions):
    OperatorComparator-Plhdr() -> <add-completions(|("Equal", Equal()))
                                   ; fail> completions

  suggest-completions(|completions):
    OperatorComparator-Plhdr() -> <add-completions(|("Diff", Diff()))
                                   ; fail> completions

  suggest-completions(|completions):
    OperatorComparator-Plhdr() -> <add-completions(|("GT", GT()))
                                   ; fail> completions

  suggest-completions(|completions):
    OperatorComparator-Plhdr() -> <add-completions(|("GTE", GTE()))
                                   ; fail> completions

  suggest-completions(|completions):
    OperatorComparator-Plhdr() -> <add-completions(|("LT", LT()))
                                   ; fail> completions

  suggest-completions(|completions):
    OperatorComparator-Plhdr() -> <add-completions(|("LTE", LTE()))
                                   ; fail> completions

  suggest-completions(|completions):
    OperatorComparator-Plhdr() -> <add-completions(|("And", And()))
                                   ; fail> completions

  suggest-completions(|completions):
    OperatorComparator-Plhdr() -> <add-completions(|("Or", Or()))
                                   ; fail> completions

  suggest-completions(|completions):
    Type-Plhdr() -> <add-completions(|("Void", Void()))
                     ; fail> completions

  suggest-completions(|completions):
    Type-Plhdr() -> <add-completions(|("Integer", Integer()))
                     ; fail> completions

  suggest-completions(|completions):
    Type-Plhdr() -> <add-completions(|("Char", Char()))
                     ; fail> completions

  suggest-completions(|completions):
    Type-Plhdr() -> <add-completions(|("Boolean", Boolean()))
                     ; fail> completions

  suggest-completions(|completions):
    BasicFunction-Plhdr() -> <add-completions(
                              | ( "printPrimitive"
                                , printPrimitive(
                                    <try(inline-completions(|BasicFunction-Plhdr()))> Primitive-Plhdr()
                                  )
                                )
                              )
                              ; fail> completions

  suggest-completions(|completions):
    BasicFunction-Plhdr() -> <add-completions(
                              | ( "scan"
                                , scan(CURSOR_ELEMENT(), CURSOR_ELEMENT())
                                )
                              )
                              ; fail> completions


rules

  is-left-recursive :
    "Parameter" -> <id>

  suggest-completions-left-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "ParamSeparator"
                            , ParamSeparator(
                                orig-term
                              , <try(inline-completions(|Parameter-Plhdr()))> Parameter-Plhdr()
                              )
                            )
                          )
                          ; fail> completions
    where <is-Parameter-completion-sort> sort

  suggest-completions-left-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "AddExpr"
                            , AddExpr(
                                orig-term
                              , <try(inline-completions(|Expression-Plhdr()))> OperatorTerm-Plhdr()
                              , <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                              )
                            )
                          )
                          ; fail> completions
    where <is-Expression-completion-sort> sort

  suggest-completions-left-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "MulExpr"
                            , MulExpr(
                                orig-term
                              , <try(inline-completions(|Expression-Plhdr()))> OperatorFactor-Plhdr()
                              , <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                              )
                            )
                          )
                          ; fail> completions
    where <is-Expression-completion-sort> sort

  is-left-recursive :
    "Expression" -> <id>

  suggest-completions-left-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "LogicExpr"
                            , LogicExpr(
                                orig-term
                              , <try(inline-completions(|Expression-Plhdr()))> OperatorComparator-Plhdr()
                              , <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                              )
                            )
                          )
                          ; fail> completions
    where <is-Expression-completion-sort> sort

  suggest-completions-left-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "ArrayCall"
                            , ArrayCall(
                                orig-term
                              , <try(inline-completions(|LeftExpr-Plhdr()))> RightExpr-Plhdr()
                              )
                            )
                          )
                          ; fail> completions
    where <is-LeftExpr-completion-sort> sort

  is-left-recursive :
    "LeftExpr" -> <id>

  suggest-completions-left-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "FieldCall"
                            , FieldCall(
                                orig-term
                              , <try(inline-completions(|LeftExpr-Plhdr()))> ID-Plhdr()
                              )
                            )
                          )
                          ; fail> completions
    where <is-LeftExpr-completion-sort> sort

  is-LeftExpr-completion-sort :
    "LeftExpr" -> <id>

  is-right-recursive :
    "Statement" -> <id>

  suggest-completions-right-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "While"
                            , While(
                                <try(inline-completions(|Statement-Plhdr()))> Expression-Plhdr()
                              , orig-term
                              )
                            )
                          )
                          ; fail> completions
    where <is-Statement-completion-sort> sort

  is-Statement-completion-sort :
    "Statement" -> <id>

  is-right-recursive :
    "Parameter" -> <id>

  suggest-completions-right-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "ParamSeparator"
                            , ParamSeparator(
                                <try(inline-completions(|Parameter-Plhdr()))> Parameter-Plhdr()
                              , orig-term
                              )
                            )
                          )
                          ; fail> completions
    where <is-Parameter-completion-sort> sort

  is-Parameter-completion-sort :
    "Parameter" -> <id>

  suggest-completions-right-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "AddExpr"
                            , AddExpr(
                                <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                              , <try(inline-completions(|Expression-Plhdr()))> OperatorTerm-Plhdr()
                              , orig-term
                              )
                            )
                          )
                          ; fail> completions
    where <is-Expression-completion-sort> sort

  suggest-completions-right-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "MulExpr"
                            , MulExpr(
                                <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                              , <try(inline-completions(|Expression-Plhdr()))> OperatorFactor-Plhdr()
                              , orig-term
                              )
                            )
                          )
                          ; fail> completions
    where <is-Expression-completion-sort> sort

  is-right-recursive :
    "Expression" -> <id>

  suggest-completions-right-rec(|completions):
    (sort, orig-term) -> <add-completions(
                          | ( "LogicExpr"
                            , LogicExpr(
                                <try(inline-completions(|Expression-Plhdr()))> Expression-Plhdr()
                              , <try(inline-completions(|Expression-Plhdr()))> OperatorComparator-Plhdr()
                              , orig-term
                              )
                            )
                          )
                          ; fail> completions
    where <is-Expression-completion-sort> sort

  is-Expression-completion-sort :
    "Expression" -> <id>

  is-left-recursive :
    "Variable" -> <is-left-recursive> "Program"
    where <not(is-lexical-completion-sort)> "Variable"

  is-right-recursive :
    "Variable" -> <is-right-recursive> "Program"
    where <not(is-lexical-completion-sort)> "Variable"

  is-Program-completion-sort :
    "Variable" -> <id>

  is-left-recursive :
    "CodeBlock" -> <is-left-recursive> "Statement"
    where <not(is-lexical-completion-sort)> "CodeBlock"

  is-right-recursive :
    "CodeBlock" -> <is-right-recursive> "Statement"
    where <not(is-lexical-completion-sort)> "CodeBlock"

  is-Statement-completion-sort :
    "CodeBlock" -> <id>

  is-left-recursive :
    "Expression" -> <is-left-recursive> "Argument"
    where <not(is-lexical-completion-sort)> "Expression"

  is-right-recursive :
    "Expression" -> <is-right-recursive> "Argument"
    where <not(is-lexical-completion-sort)> "Expression"

  is-Argument-completion-sort :
    "Expression" -> <id>

  is-left-recursive :
    "Primitive" -> <is-left-recursive> "Expression"
    where <not(is-lexical-completion-sort)> "Primitive"

  is-right-recursive :
    "Primitive" -> <is-right-recursive> "Expression"
    where <not(is-lexical-completion-sort)> "Primitive"

  is-Expression-completion-sort :
    "Primitive" -> <id>

  is-left-recursive :
    "LeftExpr" -> <is-left-recursive> "Expression"
    where <not(is-lexical-completion-sort)> "LeftExpr"

  is-right-recursive :
    "LeftExpr" -> <is-right-recursive> "Expression"
    where <not(is-lexical-completion-sort)> "LeftExpr"

  is-Expression-completion-sort :
    "LeftExpr" -> <id>

  is-left-recursive :
    "INT" -> <is-left-recursive> "Primitive"
    where <not(is-lexical-completion-sort)> "INT"

  is-right-recursive :
    "INT" -> <is-right-recursive> "Primitive"
    where <not(is-lexical-completion-sort)> "INT"

  is-Primitive-completion-sort :
    "INT" -> <id>

  is-left-recursive :
    "CHAR" -> <is-left-recursive> "Primitive"
    where <not(is-lexical-completion-sort)> "CHAR"

  is-right-recursive :
    "CHAR" -> <is-right-recursive> "Primitive"
    where <not(is-lexical-completion-sort)> "CHAR"

  is-Primitive-completion-sort :
    "CHAR" -> <id>

  is-left-recursive :
    "BOOLEAN" -> <is-left-recursive> "Primitive"
    where <not(is-lexical-completion-sort)> "BOOLEAN"

  is-right-recursive :
    "BOOLEAN" -> <is-right-recursive> "Primitive"
    where <not(is-lexical-completion-sort)> "BOOLEAN"

  is-Primitive-completion-sort :
    "BOOLEAN" -> <id>

  is-left-recursive :
    "ID" -> <is-left-recursive> "LeftExpr"
    where <not(is-lexical-completion-sort)> "ID"

  is-right-recursive :
    "ID" -> <is-right-recursive> "LeftExpr"
    where <not(is-lexical-completion-sort)> "ID"

  is-LeftExpr-completion-sort :
    "ID" -> <id>

  is-left-recursive :
    "Expression" -> <is-left-recursive> "RightExpr"
    where <not(is-lexical-completion-sort)> "Expression"

  is-right-recursive :
    "Expression" -> <is-right-recursive> "RightExpr"
    where <not(is-lexical-completion-sort)> "Expression"

  is-RightExpr-completion-sort :
    "Expression" -> <id>


rules

  is-SDF-placeholder =
    ?Start-Plhdr()

  is-SDF-placeholder =
    ?Program-Plhdr()

  is-SDF-placeholder =
    ?CodeBlock-Plhdr()

  is-SDF-placeholder =
    ?IfElse-Plhdr()

  is-SDF-placeholder =
    ?Statement-Plhdr()

  is-SDF-placeholder =
    ?Variable-Plhdr()

  is-SDF-placeholder =
    ?Parameter-Plhdr()

  is-SDF-placeholder =
    ?INT-Plhdr()

  is-SDF-placeholder =
    ?CHAR-Plhdr()

  is-SDF-placeholder =
    ?BOOLEAN-Plhdr()

  is-SDF-placeholder =
    ?Argument-Plhdr()

  is-SDF-placeholder =
    ?LeftExpr-Plhdr()

  is-SDF-placeholder =
    ?RightExpr-Plhdr()

  is-SDF-placeholder =
    ?Expression-Plhdr()

  is-SDF-placeholder =
    ?OperatorTerm-Plhdr()

  is-SDF-placeholder =
    ?OperatorFactor-Plhdr()

  is-SDF-placeholder =
    ?OperatorComparator-Plhdr()

  is-SDF-placeholder =
    ?Type-Plhdr()

  is-SDF-placeholder =
    ?Primitive-Plhdr()

  is-SDF-placeholder =
    ?BasicFunction-Plhdr()

  is-SDF-placeholder =
    ?INPUT-Plhdr()

  is-SDF-placeholder =
    ?ID-Plhdr()