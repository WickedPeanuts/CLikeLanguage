module clikelanguage

imports
  
  signatures/CLikeLanguage-sig
  completion/completion
  pp
  outline
  analysis

rules // Debugging
  
  debug-show-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path
    ; result   := node

  gera-xgcc:
    (node, position, ast, path, project-path) -> ("assembly.txt", <gera-prog> ast)
    
  gera-prog:
     Program(i, ld)  -> 
     $[
       .file	1	"assembly.c"
       .section	.mdebug.abi32
       .previous
       
       [<gera-program>ld]
       
       .ident "GCC: (GNU) 4.9.0"
     ]
     
  gera-program:
    [] -> $[]
  
  //VARIABLE
  //Variable.Declaration OK!
  gera-program:
   [Declaration(Type, ID)|tail] ->
    $[
    .comm	[ID],4,4
    [<gera-program>tail]
    ]
    
  //TODO aprender a distrinchar variáveis
  gera-program:
   [Structure(VarList, ID)|tail] ->
    $[
    .comm	[ID], [memSize], 0
    [<gera-program>tail]
    ]
    with
      memSize := <mul> (Integer(), 4)
  
  //TODO Gerar Expressão
  gera-program:
   [DeclarationInst(Type, ID, Expression)|tail] ->
    $[
    .comm	[ID],4,4
    [<gera-program>tail]
    ]
  
  //Bug (Integer())
  gera-program:
   [DeclarationArray(Type, ID, Integer())|tail] ->
    $[
    .comm	[ID],[memSize],0
    [<gera-program>tail]
    ]
    with
      memSize := <mul> (Integer(), 4)