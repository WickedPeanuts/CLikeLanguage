module clikelanguage

imports
  
  signatures/CLikeLanguage-sig
  completion/completion
  pp
  outline
  analysis

rules // Debugging
  
  debug-show-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path
    ; result   := node

  gera-xgcc:
    (node, position, ast, path, project-path) -> ("assembly.txt", <gera-prog> ast)
    
  gera-prog:
     Program(i, ld)  -> 
     $[
       .file	1	"assembly.c"
       .section	.mdebug.abi32
       .previous
       
       [<gera-program>ld]
       
       .ident "GCC: (GNU) 4.9.0"
     ]
     
  gera-program:
    [] -> $[]
  
  //STATEMENT
  
  //Blank (não sei se é necessário)
  gera-statement:
   [] -> $[]
   
  //Break;
  gera-statement:
   [Break()|tail] ->
   $[
   Break;
   [<gera-statement>tail]
   ]
  
  //Codeblock
  gera-statement:
   Block(Statement) -> 
   $[
   [<gera-statement>Statement]
   ]
   
  //If
  gera-statement:
   [If(Expression, Statement, IfElse)|tail] ->
   $[
   IF_[ifCount]_BEGIN:
   [<gera-statement>Statement]
   IF_[ifCount]_NOTEQUAL:
   [<gera-statement>Statement]
   IF_[ifCount]_END:
   ]
   with
     ifCount := 1
  
  //IFElse
  gera-ifelse:
   Some(Single(Statement)) ->
   $[
   [<gera-statement>Statement]
   ]
   
  
  
  //PROGRAM
  
  //Function
  //TODO GERAR PARAMETROS
  gera-program:
   [Function(Type, ID, ParameterList, Block(StatementList))|tail] ->
    $[
	[ID]:
    [<gera-statement>StatementList]
    .end	[ID]
	.size	[ID], .-[ID]
	.ident	"GCC: (GNU) 4.9.0"
	[<gera-program>tail]
    ]
  
  //Program.Structure
  //TODO aprender a distrinchar variáveis
  gera-program:
   [Structure(VarList, ID)|tail] ->
    $[
    .comm	[ID], [memSize], 0
    [<gera-program>tail]
    ]
    with
      memSize := <mul> (Integer(), 4)
  
  //Variable
  //Program.Variable.Declaration OK!
  gera-program:
   [Declaration(Type, ID)|tail] ->
    $[
    .comm	[ID],4,4
    [<gera-program>tail]
    ]
  
  //Program.Variable.DeclarationInst
  //TODO Gerar Expressão
  gera-program:
   [DeclarationInst(Type, ID, Expression)|tail] ->
    $[
    .comm	[ID],4,4
    [<gera-program>tail]
    ]
  
  //Program.Variable.DeclarationArray
  //Bug (Integer())
  gera-program:
   [DeclarationArray(Type, ID, Integer())|tail] ->
    $[
    .comm	[ID],[memSize],0
    [<gera-program>tail]
    ]
    with
      memSize := <mul> (Integer(), 4)