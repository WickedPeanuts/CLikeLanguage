module CLikeLanguage

imports
  
  Common

context-free start-symbols
  
  Start

sorts Variable Expression Code Parameter

context-free syntax
  
  Start.Program = "program" ID "{" Program* "}"
  
  //Done!
  Program = Variable
  Program.Structure = "struct" "{" Variable* "}" ID ";"
  Program.Function = Type ID "(" Parameter* ")" CodeBlock
    
  CodeBlock.Block = "{" Statement* "}"
  
  Statement.If = "if" "(" Expression ")" Statement IfElse?
  Statement.While = "while" "(" Expression ")" Statement
  Statement.Assignment = ID "=" Expression ";"
  Statement.StructAssignment = StructVar "=" Expression ";"
  Statement.Break = "break;"
  Statement.Return = "return" Expression? ";"
  Statement = CodeBlock
  IfElse.Single = "else" Statement
   
  Variable.Declaration = Type ID ";"
  Variable.DeclarationArray = Type ID "[" INT "];"
  Variable.DeclarationInst =  Type ID "=" Primitive ";"
           
  Parameter.SimpleParameter = Type ID
  Parameter.ParamSeparator = Parameter "," Parameter {left}
  
  Argument.SingleArgument = Expression
  Argument.ArguSeparator = Expression "," Expression {left}
  
  Expression.AddExpr = [[Expression] [OperatorTerm] [Expression]] {left}
  Expression.MulExpr = [[Expression] [OperatorFactor] [Expression]] {left}
  Expression.LogicExpr = [[Expression] [OperatorComparator] [Expression]] {left}
  Expression.ParenthesisExpression = "(" Expression ")"
  Expression = Primitive
    
  Primitive.IntegerPrim = INT
  Primitive.CharPrim = CHAR
  Primitive.BoolPrim = BOOLEAN
  Primitive.IdentifierPrim = ID
  Primitive.PrimitiveFunction = ID "(" Argument* ")"
  Primitive.StructPrim = StructVar
    
  StructVar.Call =  StructVarCall+ ID
  StructVarCall.Depth = ID "."
  
  OperatorTerm.Add = "+"
  OperatorTerm.Sub = "-"
  OperatorFactor.Mul = "*"
  OperatorFactor.Div = "/"  
  OperatorComparator.Equal = "=="
  OperatorComparator.Diff = "!="
  OperatorComparator.GT = ">"
  OperatorComparator.GTE = ">="
  OperatorComparator.LT = "<"
  OperatorComparator.LTE = "<="
  OperatorComparator.And = "&&"
  OperatorComparator.Or = "||"
  
  Type.Void = [void]
  Type.Integer = [int]
  Type.Char = [char]
  Type.Boolean = [bool]
  
  BasicFunction.printPrimitive = "print" "(" Primitive ")"
  BasicFunction.scan = "scan"  "(" INPUT* "," ID* ")"
  
  context-free priorities
  
  Expression.MulExpr > {left: Expression.AddExpr} > Expression.LogicExpr
  