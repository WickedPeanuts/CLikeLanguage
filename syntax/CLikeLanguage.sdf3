module CLikeLanguage

imports
  
  Common

context-free start-symbols
  
  Start

sorts Variable Expression Code Parameter

context-free syntax
  
  Start.Program = "program" ID "{" Program* "}"
  
  //Done!
  Program = Variable
  Program.Structure = "struct" "{" Variable* "}" ID ";"
  Program.Function = Type ID "(" Parameter* ")" CodeBlock
    
  CodeBlock.Block = "{" Statement* "}"
  
  Statement.If = "if" "(" Expression ")" Statement IfElse?
  Statement.While = "while" "(" Expression ")" Statement
  Statement.Assignment = ID "=" Expression ";"
  Statement.Break = "break;"
  Statement.Return = "return" Expression? ";"
  //Done!
  Statement = CodeBlock
  //Done!
  IfElse.Single = "else" Statement
   
  //Done
  Variable.Declaration = Type ID ";"
  Variable.DeclarationArray = Type ID "[" INT "];"
  Variable.DeclarationInst =  Type ID "=" Expression ";"
           
  Parameter.Parameter = Type ID
  Parameter.Separator = Parameter "," Parameter {left}
  
  Argument.Parameter = Expression
  Argument.Separator = Expression "," Expression {left}
  
  Expression.Add = [[Expression] [OperatorTerm] [Expression]] {left}
  Expression.Mul = [[Expression] [OperatorFactor] [Expression]] {left}
  Expression.Logic = [[Expression] [OperatorComparator] [Expression]] {left}
  Expression.Primitive = Primitive
  Expression.Expression ="(" Expression ")"
  
  Primitive = INT
  Primitive = CHAR
  Primitive = BOOLEAN
  Primitive = ID
  Primitive.Function = ID "(" Argument* ")"
  
  OperatorTerm.Add = "+"
  OperatorTerm.Sub = "-"
  OperatorFactor.Mul = "*"
  OperatorFactor.Div = "/"  
  OperatorComparator.Equal = "=="
  OperatorComparator.Diff = "!="
  OperatorComparator.GT = ">"
  OperatorComparator.GTE = ">="
  OperatorComparator.LT = "<"
  OperatorComparator.LTE = "<="
  OperatorComparator.And = "&&"
  OperatorComparator.Or = "||"
  
  Type.Void = [void]
  Type.Integer = [int]
  Type.Char = [char]
  Type.Boolean = [bool]
  
  BasicFunction.printPrimitive = "print" "(" Primitive ")"
  BasicFunction.scan = "scan"  "(" INPUT* "," ID* ")"
  
  context-free priorities
  
  Expression.Mul > {left: Expression.Add} > Expression.Logic
  