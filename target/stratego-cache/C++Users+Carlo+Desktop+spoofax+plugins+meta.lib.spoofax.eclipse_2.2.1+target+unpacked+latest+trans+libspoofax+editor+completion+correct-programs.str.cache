Module("libspoofax/editor/completion/correct-programs",[Imports([Import("libspoofax/editor/completion/core"),Import("libspoofax/editor/completion/interface"),Import("libspoofax/editor/refactoring/interface"),Import("libspoofax/editor/refactoring/layout-adaption"),Import("libspoofax/editor/refactoring/construct-text"),Import("libspoofax/editor/refactoring/construct-initial-list-structure"),Import("libspoofax/term/origin")]),Rules([RDef("get-proposals-empty-program",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Tuple([Var("sort"),Var("placeholder")])),Var(ListVar("proposal*")),Seq(Assign(Var("suggestion-is"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(Assign(Var(ListVar("suggestion*")),App(Seq(Call(SVar("try"),[CallT(SVar("suggest-completions"),[],[Var("suggestion-is")])]),BA(CallNoArgs(SVar("iset-elements")),Var("suggestion-is"))),Var("placeholder"))),Assign(Var(ListVar("proposal*")),App(Call(SVar("map"),[Call(SVar("get-text-from-placeholder-expand"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))])]),Var(ListVar("suggestion*")))))))),RDef("get-text-from-placeholder-expand",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Tuple([Var("name"),Var("completion-term")])),NoAnnoList(Tuple([Var("name"),Var("text")])),Assign(Var("text"),App(CallNoArgs(SVar("pp")),Var("completion-term"))))),RDef("get-proposals-placeholder",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Tuple([Var("sort"),Var("placeholder"),Var("placeholder-parent"),Var("placeholder-idx")])),Var(ListVar("proposal*")),Seq(Assign(Var("suggestion-is"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(Assign(Var(ListVar("suggestion*")),App(Seq(Call(SVar("try"),[CallT(SVar("suggest-completions"),[],[Var("suggestion-is")])]),BA(CallNoArgs(SVar("iset-elements")),Var("suggestion-is"))),Var("placeholder"))),Assign(Var(ListVar("proposal*")),App(Call(SVar("map"),[CallT(SVar("get-text-from-placeholder-expand"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))],[Var("placeholder"),Var("placeholder-parent"),Var("placeholder-idx")])]),Var(ListVar("suggestion*")))))))),RDefT("get-text-from-placeholder-expand",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],[DefaultVarDec("old-term"),DefaultVarDec("parent"),DefaultVarDec("idx")],Rule(NoAnnoList(Tuple([Var("name"),Var("completion-term")])),NoAnnoList(Tuple([Var("name"),Var("text"),Var("additionalInfo"),Var("change")])),Seq(Assign(Var("completion-term'"),App(LChoice(Call(SVar("parenthesize-completion-term"),[CallNoArgs(SVar("parenthesize"))]),Build(Var("completion-term"))),NoAnnoList(Tuple([Var("parent"),Var("old-term"),Var("completion-term"),Var("idx")])))),Seq(Assign(Var("change"),NoAnnoList(Op("REPLACE_TERM",[Var("old-term"),Var("completion-term'")]))),Seq(Assign(Var("additionalInfo"),App(CallNoArgs(SVar("pp")),Var("completion-term'"))),Assign(Var("text"),App(Call(SVar("build-description-simple-replace"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))]),Var("change")))))))),RDef("parenthesize-completion-term",[DefaultVarDec("parenthesize")],Rule(NoAnnoList(Tuple([Var("parent"),Var("old-term"),Var("completion-term"),Var("idx")])),Var("completion-term'"),[WhereClause(BA(Not(CallT(SVar("match-node-origin"),[],[Var("parent")])),Var("old-term"))),WhereClause(Seq(Assign(Var("expanded-parent"),App(Call(SVar("topdown"),[Call(SVar("try"),[Seq(CallT(SVar("match-node-origin"),[],[Var("old-term")]),Build(Var("completion-term")))])]),Var("parent"))),Seq(Assign(Var("parenthesized-parent"),App(CallNoArgs(SVar("parenthesize")),Var("expanded-parent"))),Seq(Assign(Var(ListVar("arg-parenthesized-parent*")),App(CallNoArgs(SVar("get-arguments")),Var("parenthesized-parent"))),CondChoice(BA(Call(SVar("at-index"),[Match(Var("completion-term"))]),NoAnnoList(Tuple([Var("idx"),Var(ListVar("arg-parenthesized-parent*"))]))),Assign(Var("completion-term'"),Var("completion-term")),Assign(Var("completion-term'"),NoAnnoList(Op("Parenthetical",[Var("completion-term")]))))))))])),RDef("get-proposals-left-recursive",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Tuple([Var("sort"),Var("term")])),Var(ListVar("proposal*")),Seq(Assign(Var("suggestion-is"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(Assign(Var(ListVar("suggestion*")),App(Seq(Call(SVar("try"),[CallT(SVar("suggest-completions-left-rec"),[],[Var("suggestion-is")])]),BA(CallNoArgs(SVar("iset-elements")),Var("suggestion-is"))),NoAnnoList(Tuple([Var("sort"),Var("term")])))),Assign(Var(ListVar("proposal*")),App(Call(SVar("map"),[CallT(SVar("get-text-from-left-recursive-suggestion"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))],[Var("term")])]),Var(ListVar("suggestion*")))))))),RDefT("get-text-from-left-recursive-suggestion",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],[DefaultVarDec("old-term")],Rule(NoAnnoList(Tuple([Var("name"),Var("expansion")])),NoAnnoList(Tuple([Var("name"),Var("text"),Var("additionalInfo"),Var("change"),Var("prefix")])),Seq(Assign(Var("additionalInfo"),App(CallNoArgs(SVar("pp")),Var("expansion"))),Seq(Assign(Var("change"),NoAnnoList(Op("REPLACE_TERM",[Var("old-term"),Var("expansion")]))),Seq(Assign(Var("text"),App(Call(SVar("build-description-simple-replace"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))]),Var("change"))),Assign(Var("prefix"),App(Seq(CallNoArgs(SVar("parenthesize")),Seq(CallNoArgs(SVar("get-arguments")),Seq(Match(NoAnnoList(ListTail([RootApp(Id)],Var("tl")))),CallNoArgs(SVar("pp"))))),Var("expansion")))))))),RDef("get-proposals-right-recursive",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Tuple([Var("sort"),Var("term")])),Var(ListVar("proposal*")),Seq(Assign(Var("suggestion-is"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(Assign(Var(ListVar("suggestion*")),App(Seq(Call(SVar("try"),[CallT(SVar("suggest-completions-right-rec"),[],[Var("suggestion-is")])]),BA(CallNoArgs(SVar("iset-elements")),Var("suggestion-is"))),NoAnnoList(Tuple([Var("sort"),Var("term")])))),Assign(Var(ListVar("proposal*")),App(Call(SVar("map"),[CallT(SVar("get-text-from-right-recursive-suggestion"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))],[Var("term")])]),Var(ListVar("suggestion*")))))))),RDefT("get-text-from-right-recursive-suggestion",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],[DefaultVarDec("old-term")],Rule(NoAnnoList(Tuple([Var("name"),Var("expansion")])),NoAnnoList(Tuple([Var("name"),Var("text"),Var("additionalInfo"),Var("change"),Var("suffix")])),Seq(Assign(Var("additionalInfo"),App(CallNoArgs(SVar("pp")),Var("expansion"))),Seq(Assign(Var("change"),NoAnnoList(Op("REPLACE_TERM",[Var("old-term"),Var("expansion")]))),Seq(Assign(Var("text"),App(Call(SVar("build-description-simple-replace"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))]),Var("change"))),Assign(Var("suffix"),App(Seq(CallNoArgs(SVar("parenthesize")),Seq(CallNoArgs(SVar("get-arguments")),Seq(CallNoArgs(SVar("last")),CallNoArgs(SVar("pp"))))),Var("expansion")))))))),RDef("get-proposals-list",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Tuple([Var("sort"),Var("list"),Var("placeholder"),Var("cursor-position")])),Var(ListVar("proposal*")),Seq(Assign(Var("suggestion-is"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(Assign(Var(ListVar("suggestion*")),App(Seq(Call(SVar("try"),[CallT(SVar("suggest-completions"),[],[Var("suggestion-is")])]),BA(CallNoArgs(SVar("iset-elements")),Var("suggestion-is"))),Var("placeholder"))),CondChoice(Assign(NoAnnoList(List([])),Var(ListVar("suggestion*"))),Assign(Var(ListVar("proposal*")),App(Call(SVar("map"),[CallT(SVar("get-proposals-from-list"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))],[Var("list"),Var("cursor-position")])]),NoAnnoList(List([NoAnnoList(Tuple([Var("sort"),Var("placeholder")]))])))),Assign(Var(ListVar("proposal*")),App(Call(SVar("map"),[CallT(SVar("get-proposals-from-list"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))],[Var("list"),Var("cursor-position")])]),Var(ListVar("suggestion*"))))))))),RDefT("get-proposals-from-list",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],[DefaultVarDec("list"),DefaultVarDec("cursor-pos")],Rule(NoAnnoList(Tuple([Var("name"),Var("new-elem")])),NoAnnoList(Tuple([Var("name"),Var("text"),Var("additionalInfo"),Var("change")])),Seq(Assign(Var("change"),App(CallNoArgs(SVar("calculate-completion-change")),NoAnnoList(Tuple([Var("cursor-pos"),Var("list"),Var("new-elem")])))),Seq(Assign(Var("text"),App(Call(SVar("build-description"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))]),Var("change"))),Assign(Var("additionalInfo"),App(CallNoArgs(SVar("pp")),Var("new-elem"))))))),RDefNoArgs("calculate-completion-change",Rule(NoAnnoList(Tuple([Var("cursor-pos"),Var("list"),Var("new-elem")])),Var("change"),Seq(Assign(Var("index"),App(CallT(SVar("get-index-cursor-position"),[],[NoAnnoList(Int("1"))]),NoAnnoList(Tuple([Var("cursor-pos"),Var("list")])))),Seq(Assign(Var("length"),App(CallNoArgs(SVar("length")),Var("list"))),CondChoice(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([Var("index"),Var("length")]))),Assign(Var("change"),NoAnnoList(Op("INSERT_AT_END",[Var("list"),NoAnnoList(List([Var("new-elem")]))]))),Assign(Var("change"),NoAnnoList(Op("INSERT_BEFORE",[App(CallT(SVar("index"),[],[Var("index")]),Var("list")),NoAnnoList(List([Var("new-elem")]))])))))))),RDefT("add-list-pos",[],[DefaultVarDec("new-elem"),DefaultVarDec("pos")],RuleNoCond(NoAnnoList(List([])),NoAnnoList(List([Var("new-elem")])))),RDefT("add-list-pos",[],[DefaultVarDec("new-elem"),DefaultVarDec("pos")],Rule(As(Var("list"),NoAnnoList(ListTail([Var("h")],Var("hs")))),NoAnnoList(ListTail([Var("new-elem")],Var("list"))),Seq(Assign(NoAnnoList(Tuple([Var("start-offset"),Var("end-offset")])),App(CallNoArgs(SVar("origin-offset")),Var("h"))),BA(CallNoArgs(SVar("geq")),NoAnnoList(Tuple([Var("start-offset"),Var("pos")])))))),RDefT("add-list-pos",[],[DefaultVarDec("new-elem"),DefaultVarDec("pos")],Rule(As(Var("list"),NoAnnoList(ListTail([Var("h")],Var("hs")))),NoAnnoList(List([Var("h"),App(CallT(SVar("add-list-pos"),[],[Var("new-elem"),Var("pos")]),Var("hs"))])),Seq(Assign(NoAnnoList(Tuple([Var("start-offset"),Var("end-offset")])),App(CallNoArgs(SVar("origin-offset")),Var("h"))),BA(CallNoArgs(SVar("geq")),NoAnnoList(Tuple([Var("pos"),Var("end-offset")])))))),RDef("get-proposals-optional",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Tuple([Var("sort"),Var("term"),Var("placeholder")])),Var(ListVar("proposal*")),Seq(Assign(Var("suggestion-is"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(Assign(Var(ListVar("suggestion*")),App(Seq(Call(SVar("try"),[CallT(SVar("suggest-completions"),[],[Var("suggestion-is")])]),BA(CallNoArgs(SVar("iset-elements")),Var("suggestion-is"))),Var("placeholder"))),CondChoice(Assign(NoAnnoList(List([])),Var(ListVar("suggestion*"))),Assign(Var(ListVar("proposal*")),App(Call(SVar("map"),[CallT(SVar("get-proposals-from-optional"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))],[Var("term")])]),NoAnnoList(List([NoAnnoList(Tuple([Var("sort"),Var("placeholder")]))])))),Assign(Var(ListVar("proposal*")),App(Call(SVar("map"),[CallT(SVar("get-proposals-from-optional"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))],[Var("term")])]),Var(ListVar("suggestion*"))))))))),RDefT("get-proposals-from-optional",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],[DefaultVarDec("old-term")],Rule(NoAnnoList(Tuple([Var("name"),Var("new-elem")])),NoAnnoList(Tuple([Var("name"),Var("text"),Var("additionalInfo"),Var("change")])),Seq(Assign(Var("change"),NoAnnoList(Op("REPLACE_TERM",[Var("old-term"),Var("new-elem")]))),Seq(Assign(Var("text"),App(Call(SVar("build-description"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("indent")),CallNoArgs(SVar("leading-ws")),CallNoArgs(SVar("separator"))]),Var("change"))),Assign(Var("additionalInfo"),App(CallNoArgs(SVar("pp")),Var("new-elem")))))))]),Rules([RDef("build-description",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Op("INSERT_AT_END",[Var("old-list"),NoAnnoList(List([Var("completion-term")]))])),Var("text"),[WhereClause(BA(Match(NoAnnoList(List([]))),Var("old-list"))),WithClause(Seq(Assign(Var("parent"),App(CallNoArgs(SVar("get-parent")),Var("old-list"))),Seq(Assign(Var("index"),App(CallNoArgs(SVar("find-position")),NoAnnoList(Tuple([Var("old-list"),Var("parent")])))),Seq(Assign(Var("leading-ws"),App(CallT(SVar("calculate-leading-ws"),[CallNoArgs(SVar("leading-ws"))],[Var("old-list")]),NoAnnoList(Tuple([Var("parent"),Var("index")])))),Seq(Assign(Var("indent"),App(CallNoArgs(SVar("indent")),NoAnnoList(Tuple([Var("parent"),Var("index")])))),Seq(Assign(Var("parent-indent"),App(LChoice(CallNoArgs(SVar("origin-indent")),Build(NoAnnoList(Str("\"\"")))),Var("parent"))),Seq(Assign(Var("reconstructed-text"),App(Call(SVar("construct-text-by-pp"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),Var("completion-term"))),CondChoice(BA(Call(SVar("is-substring"),[Build(NoAnnoList(Str("\"\\n\"")))]),Var("leading-ws")),Assign(Var("text"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("leading-ws"),App(Seq(CallT(SVar("replace-indentation"),[],[Var("indent"),NoAnnoList(Str("\"\""))]),CallT(SVar("prefix-lines"),[],[Var("parent-indent")])),Var("reconstructed-text"))])))),Assign(Var("text"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("leading-ws"),App(CallT(SVar("replace-indentation"),[],[Var("indent"),NoAnnoList(Str("\"\""))]),Var("reconstructed-text"))]))))))))))))])),RDef("build-description",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Op("INSERT_AT_END",[Var("old-list"),NoAnnoList(List([Var("completion-term")]))])),Var("text"),[WhereClause(BA(Not(Match(NoAnnoList(List([])))),Var("old-list"))),WithClause(Seq(Assign(Var("parent"),App(CallNoArgs(SVar("get-parent")),Var("old-list"))),Seq(Assign(Var("index"),App(CallNoArgs(SVar("find-position")),NoAnnoList(Tuple([Var("old-list"),Var("parent")])))),Seq(Assign(Var("sep"),App(CallNoArgs(SVar("separator")),NoAnnoList(Tuple([Var("parent"),Var("index")])))),Seq(Assign(Var("indent"),App(CallNoArgs(SVar("indent")),NoAnnoList(Tuple([Var("parent"),Var("index")])))),Seq(Assign(Var("parent-indent"),App(LChoice(CallNoArgs(SVar("origin-indent")),Build(NoAnnoList(Str("\"\"")))),Var("parent"))),Seq(Assign(Var("reconstructed-text"),App(Call(SVar("construct-text-by-pp"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),Var("completion-term"))),Seq(Assign(Var("separator"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("sep"),Var("indent")])))),CondChoice(BA(Call(SVar("is-substring"),[Build(NoAnnoList(Str("\"\\n\"")))]),Var("separator")),Assign(Var("text"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("sep"),App(CallT(SVar("prefix-lines"),[],[App(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([Var("indent"),Var("parent-indent")])))]),Var("reconstructed-text"))])))),Assign(Var("text"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("sep"),Var("reconstructed-text")])))))))))))))])),RDef("build-description",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Op("INSERT_BEFORE",[Var("old-node"),NoAnnoList(List([Var("completion-term")]))])),Var("text"),Seq(Assign(Var("parent"),App(CallNoArgs(SVar("get-parent")),Var("old-node"))),Seq(Assign(Var("grandparent"),App(CallNoArgs(SVar("get-parent")),Var("parent"))),Seq(Assign(Var("index-old-term"),App(CallT(SVar("get-index-origin"),[],[NoAnnoList(Int("1"))]),NoAnnoList(Tuple([Var("old-node"),Var("parent")])))),Seq(Assign(Var("index-parent"),App(CallNoArgs(SVar("find-position")),NoAnnoList(Tuple([Var("parent"),Var("grandparent")])))),Seq(Assign(Var("sep"),App(CallNoArgs(SVar("separator")),NoAnnoList(Tuple([Var("grandparent"),Var("index-parent")])))),Seq(Assign(Var("indent"),App(CallNoArgs(SVar("indent")),NoAnnoList(Tuple([Var("grandparent"),Var("index-parent")])))),Seq(Assign(Var("leading-ws"),App(CallT(SVar("calculate-leading-ws"),[CallNoArgs(SVar("leading-ws"))],[Var("parent")]),NoAnnoList(Tuple([Var("grandparent"),Var("index-parent")])))),Seq(Assign(Var("leading-ws-local"),App(CallNoArgs(SVar("leading-ws")),NoAnnoList(Tuple([Var("grandparent"),Var("index-parent")])))),Seq(Assign(Var("grandparent-indent"),App(LChoice(CallNoArgs(SVar("origin-indent")),Build(NoAnnoList(Str("\"\"")))),Var("grandparent"))),Seq(Assign(Var("reconstructed-text"),App(Call(SVar("construct-text-by-pp"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),Var("completion-term"))),Seq(CondChoice(BA(Call(SVar("is-substring"),[Build(NoAnnoList(Str("\"\\n\"")))]),Var("leading-ws-local")),Assign(Var("leading-ws-indent"),Var("grandparent-indent")),Assign(Var("leading-ws-indent"),NoAnnoList(Str("\"\"")))),Seq(CondChoice(BA(Call(SVar("is-substring"),[Build(NoAnnoList(Str("\"\\n\"")))]),Var("sep")),Assign(Var("separator-indent"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("indent"),Var("grandparent-indent")])))),Assign(Var("separator-indent"),NoAnnoList(Str("\"\"")))),CondChoice(BA(Match(NoAnnoList(Int("1"))),Var("index-old-term")),Assign(Var("text"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("leading-ws"),App(Seq(CallT(SVar("replace-indentation"),[],[Var("indent"),NoAnnoList(Str("\"\""))]),CallT(SVar("prefix-lines"),[],[Var("leading-ws-indent")])),Var("reconstructed-text")),Var("sep")])))),Assign(Var("text"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("sep"),App(CallT(SVar("prefix-lines"),[],[Var("separator-indent")]),Var("reconstructed-text")),Var("sep")]))))))))))))))))))),RDef("build-description",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Op("REPLACE_TERM",[Var("old-term"),Var("completion-term")])),Var("text"),Seq(Assign(Var("parent"),App(CallNoArgs(SVar("get-parent")),Var("old-term"))),Seq(Assign(Var("index"),App(CallNoArgs(SVar("find-position")),NoAnnoList(Tuple([Var("old-term"),Var("parent")])))),Seq(Assign(Var("leading-ws"),App(CallT(SVar("calculate-leading-ws"),[CallNoArgs(SVar("leading-ws"))],[Var("old-term")]),NoAnnoList(Tuple([Var("parent"),Var("index")])))),Seq(Assign(Var("indent"),App(CallNoArgs(SVar("indent")),NoAnnoList(Tuple([Var("parent"),Var("index")])))),Seq(Assign(Var("reconstructed-text"),App(CallNoArgs(SVar("pp")),Var("completion-term"))),CondChoice(BA(Call(SVar("is-substring"),[Build(NoAnnoList(Str("\"\\n\"")))]),Var("leading-ws")),Assign(Var("text"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("leading-ws"),App(CallT(SVar("replace-indentation"),[],[Var("indent"),NoAnnoList(Str("\"\""))]),Var("reconstructed-text"))])))),Assign(Var("text"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("leading-ws"),Var("reconstructed-text")])))))))))))),RDef("build-description-simple-replace",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("indent"),DefaultVarDec("leading-ws"),DefaultVarDec("separator")],Rule(NoAnnoList(Op("REPLACE_TERM",[Var("old-term"),Var("completion-term")])),Var("text"),Seq(Assign(Var("old-indent"),App(LChoice(CallNoArgs(SVar("origin-indent")),StrCong("\"\"")),Var("old-term"))),Seq(Assign(Var("reconstructed-text"),App(CallNoArgs(SVar("pp")),Var("completion-term"))),Assign(Var("text"),App(CallT(SVar("replace-indentation"),[],[Var("old-indent"),NoAnnoList(Str("\"\""))]),Var("reconstructed-text")))))))])])