Module("clikelanguage",[Imports([Import("signatures/CLikeLanguage-sig"),Import("completion/completion"),Import("pp"),Import("outline"),Import("analysis")]),Rules([RDefNoArgs("debug-show-aterm",Rule(NoAnnoList(Tuple([Var("node"),Wld,Wld,Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"aterm\""))]),Var("path"))),Assign(Var("result"),Var("node"))))])),RDefNoArgs("gera-xgcc",RuleNoCond(NoAnnoList(Tuple([Var("node"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([NoAnnoList(Str("\"assembly.txt\"")),App(CallNoArgs(SVar("gera-prog")),Var("ast"))])))),RDefNoArgs("gera-prog",RuleNoCond(NoAnnoList(Op("Program",[Var("i"),Var("ld")])),NoAnnoList(StringQuotation1("       ",[QStr("\n       .file	1	\"assembly.c\"\n       .section	.mdebug.abi32\n       .previous\n       \n       "),StringEscape1("       ",App(CallNoArgs(SVar("gera-program")),Var("ld"))),QStr("\n       \n       .ident \"GCC: (GNU) 4.9.0\"\n     ")])))),RDefNoArgs("gera-program",RuleNoCond(NoAnnoList(List([])),NoAnnoList(StringQuotation1("            ",[])))),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(List([])),NoAnnoList(StringQuotation1("           ",[])))),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("Break",[]))],Var("tail"))),NoAnnoList(StringQuotation1("     ",[QStr("\n   Break;\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),Var("tail"))),QStr("\n   ")])))),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(Op("Block",[Var("Statement")])),NoAnnoList(StringQuotation1("     ",[QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),Var("Statement"))),QStr("\n   ")])))),RDefNoArgs("gera-statement",Rule(NoAnnoList(ListTail([NoAnnoList(Op("If",[Var("Expression"),Var("Statement"),Var("IfElse")]))],Var("tail"))),NoAnnoList(StringQuotation1("     ",[QStr("\n   IF_"),StringEscape1("      ",Var("ifCount")),QStr("_BEGIN:\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),Var("Statement"))),QStr("\n   IF_"),StringEscape1("      ",Var("ifCount")),QStr("_NOTEQUAL:\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),Var("Statement"))),QStr("\n   IF_"),StringEscape1("      ",Var("ifCount")),QStr("_END:\n   ")])),[WithClause(Assign(Var("ifCount"),NoAnnoList(Int("1"))))])),RDefNoArgs("gera-ifelse",RuleNoCond(NoAnnoList(Op("Some",[NoAnnoList(Op("Single",[Var("Statement")]))])),NoAnnoList(StringQuotation1("     ",[QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),Var("Statement"))),QStr("\n   ")])))),RDefNoArgs("gera-program",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("Function",[Var("Type"),Var("ID"),Var("ParameterList"),NoAnnoList(Op("Block",[Var("StatementList")]))]))],Var("tail"))),NoAnnoList(StringQuotation1("      ",[QStr("\n	"),StringEscape1("	",Var("ID")),QStr(":\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-statement")),Var("StatementList"))),QStr("\n    .end	"),StringEscape1("        	",Var("ID")),QStr("\n	.size	"),StringEscape1("	     	",Var("ID")),QStr(", .-"),StringEscape1("	     	        ",Var("ID")),QStr("\n	.ident	\"GCC: (GNU) 4.9.0\"\n	"),StringEscape1("	",App(CallNoArgs(SVar("gera-program")),Var("tail"))),QStr("\n    ")])))),RDefNoArgs("gera-program",Rule(NoAnnoList(ListTail([NoAnnoList(Op("Structure",[Var("VarList"),Var("ID")]))],Var("tail"))),NoAnnoList(StringQuotation1("      ",[QStr("\n    .comm	"),StringEscape1("         	",Var("ID")),QStr(", "),StringEscape1("         	      ",Var("memSize")),QStr(", 0\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-program")),Var("tail"))),QStr("\n    ")])),[WithClause(Assign(Var("memSize"),App(CallNoArgs(SVar("mul")),NoAnnoList(Tuple([NoAnnoList(Op("Integer",[])),NoAnnoList(Int("4"))])))))])),RDefNoArgs("gera-program",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("Declaration",[Var("Type"),Var("ID")]))],Var("tail"))),NoAnnoList(StringQuotation1("      ",[QStr("\n    .comm	"),StringEscape1("         	",Var("ID")),QStr(",4,4\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-program")),Var("tail"))),QStr("\n    ")])))),RDefNoArgs("gera-program",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("DeclarationInst",[Var("Type"),Var("ID"),Var("Expression")]))],Var("tail"))),NoAnnoList(StringQuotation1("      ",[QStr("\n    .comm	"),StringEscape1("         	",Var("ID")),QStr(",4,4\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-program")),Var("tail"))),QStr("\n    ")])))),RDefNoArgs("gera-program",Rule(NoAnnoList(ListTail([NoAnnoList(Op("DeclarationArray",[Var("Type"),Var("ID"),NoAnnoList(Op("Integer",[]))]))],Var("tail"))),NoAnnoList(StringQuotation1("      ",[QStr("\n    .comm	"),StringEscape1("         	",Var("ID")),QStr(","),StringEscape1("         	     ",Var("memSize")),QStr(",0\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-program")),Var("tail"))),QStr("\n    ")])),[WithClause(Assign(Var("memSize"),App(CallNoArgs(SVar("mul")),NoAnnoList(Tuple([NoAnnoList(Op("Integer",[])),NoAnnoList(Int("4"))])))))]))])])