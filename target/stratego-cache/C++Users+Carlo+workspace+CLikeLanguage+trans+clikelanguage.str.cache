Module("clikelanguage",[Imports([Import("signatures/CLikeLanguage-sig"),Import("completion/completion"),Import("pp"),Import("outline"),Import("analysis")]),Rules([RDefNoArgs("debug-show-aterm",Rule(NoAnnoList(Tuple([Var("node"),Wld,Wld,Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"aterm\""))]),Var("path"))),Assign(Var("result"),Var("node"))))])),RDefNoArgs("gera-xgcc",RuleNoCond(NoAnnoList(Tuple([Var("node"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([NoAnnoList(Str("\"assembly.txt\"")),App(CallNoArgs(SVar("gera-prog")),Var("ast"))])))),RDefNoArgs("gera-prog",RuleNoCond(NoAnnoList(Op("Program",[Var("i"),Var("ld")])),NoAnnoList(StringQuotation1("       ",[QStr(".file	1	\"assembly.c\"\n       .section	.mdebug.abi32\n       .previous\n       "),StringEscape1("       ",App(CallNoArgs(SVar("gera-program")),NoAnnoList(Tuple([Var("ld"),NoAnnoList(Str("\".text\""))])))),QStr("\n       .text       \n       .ident \"GCC: (GNU) 4.9.0\"")])))),RDefNoArgs("gera-expression",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("AddExpr",[Var("expr1"),Var("oprTerm"),Var("expr2")])),Var("register"),Var("parentNode")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr1"),NoAnnoList(Int("2")),Var("parentNode")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr2"),NoAnnoList(Int("3")),Var("parentNode")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-operatorTerm")),Var("oprTerm")))])))),RDefNoArgs("gera-expression",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("MulExpr",[Var("expr1"),Var("oprFact"),Var("expr2")])),Var("register"),Var("parentNode")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr1"),NoAnnoList(Int("2")),Var("parentNode")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr2"),NoAnnoList(Int("3")),Var("parentNode")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-operatorFact")),Var("oprFact")))])))),RDefNoArgs("gera-expression",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("LogicExpr",[Var("expr1"),Var("oprCmp"),Var("expr2")])),Var("register"),NoAnnoList(Str("\"assignment\""))])),NoAnnoList(StringQuotation1("     ",[QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr1"),NoAnnoList(Int("2"))])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr2"),NoAnnoList(Int("3"))])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-operatorCmp")),NoAnnoList(Tuple([Var("oprCmp")])))),QStr("\n   andi	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("2,0x00ff")])))),RDefNoArgs("gera-expression",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("LogicExpr",[Var("expr1"),Var("oprCmp"),Var("expr2")])),Var("register"),Var("parentNode")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr1"),NoAnnoList(Int("2")),Var("parentNode")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr2"),NoAnnoList(Int("3")),Var("parentNode")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-operatorCmp")),NoAnnoList(Tuple([Var("oprCmp")]))))])))),RDefNoArgs("gera-expression",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("ParenthesisExpression",[Var("expr")])),Var("register"),Var("parentNode")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr"),NoAnnoList(Int("2")),Var("parentNode")]))))])))),RDefNoArgs("gera-expression",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("IntegerPrim",[Var("args1")])),Var("register"),Var("parentNode")])),NoAnnoList(StringQuotation1("     ",[QStr("li	"),QDollar("$"),StringEscape1("       	 ",Var("register")),QStr(","),StringEscape1("       	            ",App(CallNoArgs(SVar("gera-primitive")),NoAnnoList(Op("IntegerPrim",[Var("args1")]))))])))),RDefNoArgs("gera-expression",RuleNoCond(NoAnnoList(Tuple([Var("Primitive"),Var("register"),Var("parentNode")])),NoAnnoList(StringQuotation1("     ",[QStr("lw	"),QDollar("$"),StringEscape1("       	 ",Var("register")),QStr(","),StringEscape1("       	            ",App(CallNoArgs(SVar("gera-primitive")),Var("Primitive")))])))),RDefNoArgs("gera-primitive",RuleNoCond(NoAnnoList(Str("\"true\"")),NoAnnoList(StringQuotation1("     ",[QStr("1")])))),RDefNoArgs("gera-primitive",RuleNoCond(NoAnnoList(Str("\"false\"")),NoAnnoList(StringQuotation1("     ",[QStr("0")])))),RDefNoArgs("gera-primitive",RuleNoCond(NoAnnoList(Op("IntegerPrim",[Var("arg1")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",Var("arg1"))])))),RDefNoArgs("gera-primitive",RuleNoCond(NoAnnoList(Op("CharPrim",[Var("arg1")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",Var("arg1"))])))),RDefNoArgs("gera-primitive",RuleNoCond(NoAnnoList(Op("BoolPrim",[Var("arg1")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",Var("arg1"))])))),RDefNoArgs("gera-primitive",RuleNoCond(NoAnnoList(Op("IdentifierPrim",[Var("arg1")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",Var("arg1"))])))),RDefNoArgs("gera-primitive",RuleNoCond(NoAnnoList(Op("PrimitiveFunction",[Var("varName"),Var("args")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-argument")),Var("args")))])))),RDefNoArgs("gera-operatorTerm",RuleNoCond(NoAnnoList(Op("Add",[])),NoAnnoList(StringQuotation1("              ",[QStr("#nop\n   addu	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("3,"),QDollar("$"),QStr("2")])))),RDefNoArgs("gera-operatorTerm",RuleNoCond(NoAnnoList(Op("Sub",[])),NoAnnoList(StringQuotation1("              ",[QStr("#nop\n   subu	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("3,"),QDollar("$"),QStr("2")])))),RDefNoArgs("gera-operatorFact",RuleNoCond(NoAnnoList(Op("Mul",[])),NoAnnoList(StringQuotation1("              ",[QStr("#nop\n   mult	"),QDollar("$"),QStr("3,"),QDollar("$"),QStr("2\n   mflo "),QDollar("$"),QStr("3")])))),RDefNoArgs("gera-operatorFact",RuleNoCond(NoAnnoList(Op("Div",[])),NoAnnoList(StringQuotation1("              ",[QStr(".set	noreorder\n   bne	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("0,"),QDollar("$"),QStr("1f\n   div	"),QDollar("$"),QStr("0,"),QDollar("$"),QStr("3,"),QDollar("$"),QStr("2\n   break	7\n   .set	reorder\n   1:\n   mfhi	"),QDollar("$"),QStr("3\n   mflo "),QDollar("$"),QStr("2")])))),RDefNoArgs("gera-operatorCmp",RuleNoCond(NoAnnoList(Op("Equal",[])),NoAnnoList(StringQuotation1("                ",[QStr("#nop\n   xor	"),QDollar("$"),QStr("2, "),QDollar("$"),QStr("3, "),QDollar("$"),QStr("2\n   sltu	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("2,1")])))),RDefNoArgs("gera-operatorCmp",RuleNoCond(NoAnnoList(Op("Diff",[])),NoAnnoList(StringQuotation1("               ",[QStr("#nop\n   xor	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("3,"),QDollar("$"),QStr("2\n   sltu	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("0,"),QDollar("$"),QStr("2")])))),RDefNoArgs("gera-operatorCmp",RuleNoCond(NoAnnoList(Op("GT",[])),NoAnnoList(StringQuotation1("             ",[QStr("#nop\n   slt	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("3")])))),RDefNoArgs("gera-operatorCmp",RuleNoCond(NoAnnoList(Op("GTE",[])),NoAnnoList(StringQuotation1("              ",[QStr("#nop\n   slt	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("3,"),QDollar("$"),QStr("2\n   xori	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("2,0x1")])))),RDefNoArgs("gera-operatorCmp",RuleNoCond(NoAnnoList(Op("LT",[])),NoAnnoList(StringQuotation1("             ",[QStr("#nop\n   slt	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("3,"),QDollar("$"),QStr("2")])))),RDefNoArgs("gera-operatorCmp",RuleNoCond(NoAnnoList(Op("LTE",[])),NoAnnoList(StringQuotation1("              ",[QStr("#nop\n   slt	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("3\n   xori	"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("2,0x1")])))),RDefNoArgs("gera-operatorCmp",RuleNoCond(NoAnnoList(Op("And",[])),NoAnnoList(StringQuotation1("              ",[QStr("&&")])))),RDefNoArgs("gera-operatorCmp",RuleNoCond(NoAnnoList(Op("Or",[])),NoAnnoList(StringQuotation1("             ",[QStr("||")])))),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(List([])),Wld,Wld])),NoAnnoList(StringQuotation1("                  ",[])))),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("Break",[]))],Var("tail"))),NoAnnoList(Op("None",[])),Var("functName")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-statement")),NoAnnoList(Tuple([Var("tail"),NoAnnoList(Op("None",[])),Var("functName")]))))])))),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("Break",[]))],Var("tail"))),Var("loopCount"),Wld])),NoAnnoList(StringQuotation1("     ",[QStr("j	"),QDollar("$"),QStr("While_"),StringEscape1("      	       ",Var("loopCount")),QStr("_END")])))),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Block",[Var("stmt")])),Var("loopCount"),Var("functName")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-statement")),NoAnnoList(Tuple([Var("stmt"),Var("loopCount"),Var("functName")]))))])))),RDefNoArgs("gera-statement",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("If",[Var("expr"),Var("stmt"),Var("ifElseCond")]))],Var("tail"))),Var("loopCount"),Var("functName")])),NoAnnoList(StringQuotation1("     ",[QStr("#nop\n   bne	"),QDollar("$"),QStr("3,"),QDollar("$"),QStr("2,"),QDollar("$"),QStr("IF_"),StringEscape1("      	          ",Var("ifCount")),QStr("_NOTEQUAL\n   "),QDollar("$"),QStr("IF_"),StringEscape1("       ",Var("ifCount")),QStr("_BEGIN:			# Apenas para auxiliar no pensamento\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),NoAnnoList(Tuple([Var("stmt"),Var("loopCount"),Var("functName")])))),QStr("\n   j	"),QDollar("$"),QStr("IF_"),StringEscape1("    	    ",Var("ifCount")),QStr("_END   \n   "),QDollar("$"),QStr("IF_"),StringEscape1("       ",Var("ifCount")),QStr("_NOTEQUAL:\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-ifelse")),NoAnnoList(Tuple([Var("ifElseCond"),Var("loopCount"),Var("functName")])))),QStr("\n   "),QDollar("$"),QStr("IF_"),StringEscape1("       ",Var("ifCount")),QStr("_END:\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),NoAnnoList(Tuple([Var("tail"),Var("loopCount"),Var("functName")]))))])),[WithClause(AM(CallNoArgs(SVar("new-counter")),Var("ifCount")))])),RDefNoArgs("gera-ifelse",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("None",[])),Wld,Wld])),NoAnnoList(StringQuotation1("                       ",[])))),RDefNoArgs("gera-ifelse",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Some",[NoAnnoList(Op("Single",[Var("stmt")]))])),Var("loopCount"),Var("functName")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-statement")),NoAnnoList(Tuple([Var("stmt"),Var("loopCount"),Var("functName")]))))])))),RDefNoArgs("gera-statement",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("While",[Var("expr"),Var("stmt")]))],Var("tail"))),Var("loopCount"),Var("functName")])),NoAnnoList(StringQuotation1("     ",[QStr("\n   j	"),QDollar("$"),QStr("While_"),StringEscape1("    	       ",Var("newLoopCount")),QStr("_END\n   "),QDollar("$"),QStr("While_"),StringEscape1("          ",Var("newLoopCount")),QStr("_BEGIN:\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),NoAnnoList(Tuple([Var("stmt"),Var("newLoopCount"),Var("functName")])))),QStr("\n   "),QDollar("$"),QStr("While_"),StringEscape1("          ",Var("newLoopCount")),QStr("_END:\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr"),NoAnnoList(Int("2")),NoAnnoList(Str("\"loop\""))])))),QStr("\n   bne "),QDollar("$"),QStr("2,"),QDollar("$"),QStr("0,"),QDollar("$"),QStr("While_"),StringEscape1("                    ",Var("newLoopCount")),QStr("_BEGIN\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),NoAnnoList(Tuple([Var("tail"),Var("loopCount"),Var("functName")]))))])),[WithClause(AM(CallNoArgs(SVar("new-counter")),Var("newLoopCount")))])),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("Return",[NoAnnoList(Op("Some",[Var("expr")]))]))],Var("tail"))),Var("loopCount"),Var("functName")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr"),NoAnnoList(Int("2")),NoAnnoList(Str("\"return\""))])))),QStr("\n   j	"),QDollar("$"),QStr("END_FUNCTION_"),StringEscape1("    	              ",Var("functName"))])))),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("Return",[NoAnnoList(Op("None",[]))]))],Var("tail"))),Var("loopCount"),Var("functName")])),NoAnnoList(StringQuotation1("     ",[QStr("j	"),QDollar("$"),QStr("END_FUNCTION_"),StringEscape1("      	              ",Var("functName"))])))),RDefNoArgs("gera-statement",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("Assignment",[Var("varName"),Var("expr")]))],Var("tail"))),Var("loopCount"),Var("functName")])),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-expression")),NoAnnoList(Tuple([Var("expr"),NoAnnoList(Int("2")),NoAnnoList(Str("\"assignment\""))])))),QStr("\n   sw	"),QDollar("$"),QStr("2,"),StringEscape1("     	   ",Var("varName")),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-statement")),NoAnnoList(Tuple([Var("tail"),Var("loopCount"),Var("functName")]))))])))),RDefNoArgs("gera-parameter",RuleNoCond(NoAnnoList(List([])),NoAnnoList(StringQuotation1("           ",[])))),RDefNoArgs("gera-parameter",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("SimpleParameter",[Var("varType"),Var("ident")]))],Var("tail"))),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-parameter")),Var("tail")))])))),RDefNoArgs("gera-parameter",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("ParamSeparator",[Var("leftParam"),Var("rightParam")]))],Var("tail"))),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-parameter")),NoAnnoList(List([Var("leftParam")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-parameter")),NoAnnoList(List([Var("rightParam")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-parameter")),Var("tail")))])))),RDefNoArgs("gera-argument",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("SingleArgument",[Var("expr")]))],Var("tail"))),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-argument")),Var("tail")))])))),RDefNoArgs("gera-argument",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("ArguSeparator",[Var("leftExpr"),Var("rightExpr")]))],Var("tail"))),NoAnnoList(StringQuotation1("     ",[StringEscape1("     ",App(CallNoArgs(SVar("gera-argument")),NoAnnoList(List([Var("leftExpr")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-argument")),NoAnnoList(List([Var("rightExpr")])))),QStr("\n   "),StringEscape1("   ",App(CallNoArgs(SVar("gera-argument")),Var("tail")))])))),RDefNoArgs("gera-program",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(List([])),Wld])),NoAnnoList(StringQuotation1("                ",[])))),RDefNoArgs("gera-program",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("Function",[Var("varType"),Var("ident"),Var("paramList"),NoAnnoList(Op("Block",[Var("stmtList")]))]))],Var("tail"))),Var("hasText")])),NoAnnoList(StringQuotation1("      ",[StringEscape1("      ",Var("ident")),QStr(":\n    "),StringEscape1("    ",Var("hasText")),QStr("\n    .align	2\n	.globl	calcular\n	.set	nomips16\n	.ent	"),StringEscape1("	    	",Var("ident")),QStr("\n	.type	"),StringEscape1("	     	",Var("ident")),QStr(", @function\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-parameter")),Var("paramList"))),QStr("\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-statement")),NoAnnoList(Tuple([Var("stmtList"),NoAnnoList(Op("None",[])),Var("funcName")])))),QStr("\n    "),QDollar("$"),QStr("END_FUNCTION_"),StringEscape1("                  ",Var("funcName")),QStr(":\n    .end	"),StringEscape1("        	",Var("ident")),QStr("\n	.size	"),StringEscape1("	     	",Var("ident")),QStr(", .-"),StringEscape1("	     	           ",Var("ident")),QStr("\n	"),StringEscape1("	",App(CallNoArgs(SVar("gera-program")),NoAnnoList(Tuple([Var("tail"),NoAnnoList(Str("\"\""))]))))])),[WithClause(AM(CallNoArgs(SVar("new-counter")),Var("funcName")))])),RDefNoArgs("gera-program",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("Structure",[Var("varList"),Var("ident")]))],Var("tail"))),Wld])),NoAnnoList(StringQuotation1("      ",[QStr(".comm	"),StringEscape1("           	",Var("ident")),QStr(", "),StringEscape1("           	         ",Var("memSize")),QStr(", 0\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-program")),NoAnnoList(Tuple([Var("tail"),NoAnnoList(Str("\".text\""))]))))])),[WithClause(Assign(Var("memSize"),App(CallNoArgs(SVar("mul")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("varList")),NoAnnoList(Int("4"))])))))])),RDefNoArgs("gera-program",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("DeclarationInst",[Var("varType"),Var("ident"),Var("staticValue")]))],Var("tail"))),Wld])),NoAnnoList(StringQuotation1("      ",[QStr(".globl	"),StringEscape1("            	",Var("ident")),QStr("\n	.section	.sdata,\"aw\",@progbits\n	.align	2\n	.type	"),StringEscape1("	     	",Var("ident")),QStr(", @object\n	.size	"),StringEscape1("	     	",Var("ident")),QStr(", 4\n	"),StringEscape1("	",Var("ident")),QStr(":\n	.word	 "),StringEscape1("	     	 ",App(CallNoArgs(SVar("gera-primitive")),Var("staticValue"))),QStr("\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-program")),NoAnnoList(Tuple([Var("tail"),NoAnnoList(Str("\".text\""))]))))])))),RDefNoArgs("gera-program",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("Declaration",[Var("varType"),Var("ident")]))],Var("tail"))),Wld])),NoAnnoList(StringQuotation1("      ",[QStr(".comm	"),StringEscape1("           	",Var("ident")),QStr(",4,4\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-program")),NoAnnoList(Tuple([Var("tail"),NoAnnoList(Str("\".text\""))]))))])))),RDefNoArgs("gera-program",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("DeclarationArray",[Var("varType"),Var("ident"),Var("varSize")]))],Var("tail"))),Wld])),NoAnnoList(StringQuotation1("      ",[QStr(".comm	"),StringEscape1("           	",Var("ident")),QStr(","),StringEscape1("           	        ",Var("memSize")),QStr(",0\n    "),StringEscape1("    ",App(CallNoArgs(SVar("gera-program")),NoAnnoList(Tuple([Var("tail"),NoAnnoList(Str("\".text\""))]))))])),[WithClause(Assign(Var("memSize"),App(CallNoArgs(SVar("mulS")),NoAnnoList(Tuple([Var("varSize"),NoAnnoList(Str("\"4\""))])))))]))])])