Module(
  "editor"
, Imports([Import("Syntax"), Import("Analysis")])
, [ Language(
      ""
    , [Extensions(Values(["cLike"])), SemanticProvider("target/metaborg/stratego.ctree"), SemanticProvider("target/metaborg/stratego-javastrat.jar")]
    )
  , Language(
      ""
    , [ Table("target/metaborg/sdf.tbl")
      , StartSymbols([Sort("Start")])
      , LineCommentPrefix(String("\"//\""))
      , BlockCommentDefs(BlockCommentDef(String("\"/*\""), "*", String("\"*/\"")))
      , FenceDefs(
          [FenceDef("[", "]"), FenceDef("(", ")"), FenceDef("{", "}")]
        )
      ]
    )
  , Menus(
      [ ToolbarMenu(
          Label(String("\"Syntax\""))
        , [OpenEditor()]
        , [ Action(String("\"Format\""), Strategy("editor-format"), [Source()])
          , Action(String("\"Show parsed AST\""), Strategy("debug-show-aterm"), [Source()])
          , Action(String("\"Generate .s File\""), Strategy("gera-xgcc"), [Source()])
          ]
        )
      ]
    )
  , Views(
      [OutlineView(Strategy("editor-outline"), [Source()], Some(ExpandToLevel("3")))]
    )
  , Colorer(
      " "
    , [ ColorRule(
          Token(TK_KEYWORD())
        , Attribute(ColorRGB("127", "0", "85"), NoColor(), BOLD())
        )
      , ColorRule(Token(TK_IDENTIFIER()), Attribute(ColorDefault(), NoColor(), NORMAL()))
      , ColorRule(
          Token(TK_STRING())
        , Attribute(ColorRGB("0", "0", "255"), NoColor(), NORMAL())
        )
      , ColorRule(
          Token(TK_NUMBER())
        , Attribute(ColorRGB("0", "128", "0"), NoColor(), NORMAL())
        )
      , ColorRule(
          Token(TK_VAR())
        , Attribute(ColorRGB("139", "69", "19"), NoColor(), ITALIC())
        )
      , ColorRule(
          Token(TK_OPERATOR())
        , Attribute(ColorRGB("0", "0", "128"), NoColor(), NORMAL())
        )
      , ColorRule(
          Token(TK_LAYOUT())
        , Attribute(ColorRGB("63", "127", "95"), NoColor(), ITALIC())
        )
      ]
    )
  , Colorer(
      ""
    , [ ColorDef(
          "darkred"
        , Attribute(ColorRGB("128", "0", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "red"
        , Attribute(ColorRGB("255", "0", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "darkgreen"
        , Attribute(ColorRGB("0", "128", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "green"
        , Attribute(ColorRGB("0", "255", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "darkblue"
        , Attribute(ColorRGB("0", "0", "128"), NoColor(), NORMAL())
        )
      , ColorDef(
          "blue"
        , Attribute(ColorRGB("0", "0", "255"), NoColor(), NORMAL())
        )
      , ColorDef(
          "cyan"
        , Attribute(ColorRGB("0", "255", "255"), NoColor(), NORMAL())
        )
      , ColorDef(
          "magenta"
        , Attribute(ColorRGB("255", "0", "255"), NoColor(), NORMAL())
        )
      , ColorDef(
          "yellow"
        , Attribute(ColorRGB("255", "255", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "white"
        , Attribute(ColorRGB("255", "255", "255"), NoColor(), NORMAL())
        )
      , ColorDef(
          "black"
        , Attribute(ColorRGB("0", "0", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "gray"
        , Attribute(ColorRGB("128", "128", "128"), NoColor(), NORMAL())
        )
      , ColorDef(
          "grey"
        , Attribute(ColorRGB("128", "128", "128"), NoColor(), NORMAL())
        )
      , ColorDef(
          "orange"
        , Attribute(ColorRGB("255", "165", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "pink"
        , Attribute(ColorRGB("255", "105", "180"), NoColor(), NORMAL())
        )
      , ColorDef(
          "brown"
        , Attribute(ColorRGB("139", "69", "19"), NoColor(), NORMAL())
        )
      , ColorDef("default", Attribute(ColorDefault(), NoColor(), NORMAL()))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("Start-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("Program-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("CodeBlock-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("IfElse-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("Statement-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("Variable-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("Parameter-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("Expression-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("INT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("CHAR-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("BOOLEAN-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("Argument-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("StructVar-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("StructVarCall-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("OperatorTerm-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("OperatorFactor-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("OperatorComparator-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("Type-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("Primitive-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("BasicFunction-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("INPUT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("ID-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer("", [])
  , Language(
      ""
    , [SemanticObserver(Strategy("editor-analyze"), []), Context(Legacy())]
    )
  , References(
      ""
    , [ReferenceRule("_", Strategy("editor-resolve")), HoverRule("_", Strategy("editor-hover"))]
    )
  , Menus(
      [ ToolbarMenu(
          Label(String("\"Analysis\""))
        , [OpenEditor()]
        , [Action(String("\"Show analyzed AST\""), Strategy("debug-show-analyzed"), [])]
        )
      ]
    )
  ]
)